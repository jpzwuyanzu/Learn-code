import axios from "axios";
import { message, Modal } from "antd";
import utils from "@/utils";
import { APP_USER_INFO } from "@/constants/storage";
import { CodeEnum } from "@/enums";
import _ from "lodash";
import { history } from "umi";
const filterQueryEmptyParams = (params) => {
  const emptyList = [null, void 0, ""];
  Object.keys(params).forEach((key) => {
    if (emptyList.includes(params[key]) || utils.types(params[key]) === "string" && String(params[key]).trim() === "") {
      delete params[key];
    }
  });
};
let isAccountExpired = false;
let isAccountAbnormal = false;
export var ContentTypeEnum = /* @__PURE__ */ ((ContentTypeEnum2) => {
  ContentTypeEnum2["Json"] = "application/json";
  ContentTypeEnum2["Form"] = "application/x-www-form-urlencoded";
  ContentTypeEnum2["FormData"] = "multipart/form-data";
  return ContentTypeEnum2;
})(ContentTypeEnum || {});
const request = axios.create({
  baseURL: "/api",
  timeout: 3e4
});
request.table = async (url, params = {}, config) => {
  params.size = params.pageSize;
  delete params.pageSize;
  const { customConfig, method = "post" } = config ?? {};
  const isFilter = customConfig?.filter ?? true;
  if (isFilter) {
    filterQueryEmptyParams(params);
  }
  const Key = method === "get" ? "params" : "data";
  const data = await request({
    url,
    method,
    [Key]: params
  });
  const getData = () => {
    const list = _.get(data, "records", []);
    list.forEach((item, idx) => {
      item.key = item.id ?? idx;
    });
    return list;
  };
  return {
    success: CodeEnum.Success,
    data: getData(),
    total: _.get(data, "total", 0),
    originData: data
  };
};
request.download = async (url, params = {}, config) => {
  return request.post(url, params, {
    ...config,
    responseType: "blob"
  });
};
request.interceptors.request.use((config) => {
  const { method, customConfig } = config;
  const isFilter = customConfig?.filter ?? false;
  if (isFilter && _.isObject(config.data)) {
    filterQueryEmptyParams(config.data);
  }
  const headers = {
    ...config.headers,
    language: "CN",
    tid: 300,
    timestamp: Date.now()
  };
  const userinfo = utils.localStorage.get(APP_USER_INFO);
  const token = _.get(userinfo, "token", "");
  if (!config.url?.endsWith("/login") && token) {
    headers.Authorization = `Authorization ${token}`;
  }
  if (method === "put" && !headers["Content-Type"]) {
    headers["Content-Type"] = "application/json" /* Json */;
  }
  config.headers = headers;
  return config;
});
function accountExpired() {
  Modal.warning({
    title: "\u91CD\u65B0\u767B\u5F55",
    content: "\u767B\u5F55\u4FE1\u606F\u5DF2\u8FC7\u671F\uFF0C\u8BF7\u91CD\u65B0\u767B\u5F55!",
    centered: true,
    // 居中显示
    maskClosable: false,
    // 点击modal关闭
    keyboard: false,
    // esc关闭
    okText: "\u786E\u5B9A",
    cancelText: "",
    onOk: () => {
      return new Promise((resolve) => {
        utils.localStorage.remove(APP_USER_INFO);
        history.push("/login");
        setTimeout(() => {
          isAccountExpired = false;
        }, 300);
        resolve("suc");
      });
    }
  });
}
function accountAbnormal() {
  Modal.warning({
    title: "\u60A8\u7684\u5E10\u53F7\u5DF2\u5728\u5176\u4ED6\u5730\u65B9\u767B\u5F55",
    content: "\u8BF7\u91CD\u65B0\u767B\u5F55!",
    centered: true,
    // 居中显示
    maskClosable: false,
    // 点击modal关闭
    keyboard: false,
    // esc关闭
    okText: "\u786E\u5B9A",
    cancelText: "",
    onOk: () => {
      return new Promise((resolve) => {
        utils.localStorage.remove(APP_USER_INFO);
        history.push("/login");
        setTimeout(() => {
          isAccountAbnormal = false;
        }, 300);
        resolve("suc");
      });
    }
  });
}
const downloadFile = (response) => {
  const { data, headers, config } = response;
  const type = headers["content-type"];
  const blob = new Blob([data], { type });
  let filename = headers["content-disposition"].replace(
    /\w+;filename=(utf-8'')?(.*)/,
    "$2"
  );
  filename = decodeURIComponent(filename);
  const link = document.createElement("a");
  link.href = window.URL.createObjectURL(blob);
  if (typeof link.download === "undefined") {
    link.setAttribute("target", "_blank");
  } else {
    link.setAttribute("download", decodeURI(filename));
  }
  link.click();
  window.URL.revokeObjectURL(link.href);
  return Promise.resolve(true);
};
request.interceptors.response.use((response) => {
  const responseData = response.data;
  const { config } = response;
  if (config.responseType === "blob") {
    return downloadFile(response);
  }
  if (responseData.code === CodeEnum.Success) {
    return responseData.data;
  } else if (responseData.code === CodeEnum.LoginExpired) {
    if (!isAccountExpired) {
      isAccountExpired = true;
      accountExpired();
    }
    return false;
  } else if (responseData.code === CodeEnum.AcccountAbnormal) {
    if (!isAccountAbnormal) {
      isAccountAbnormal = true;
      accountAbnormal();
    }
    return false;
  } else {
    message.error(responseData.msg || "\u8BF7\u6C42\u5931\u8D25");
    return Promise.reject(responseData);
  }
});
export default request;
