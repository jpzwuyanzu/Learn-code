import { isFunction, omit, isArray } from "lodash";
import utils from "@/utils";
export const rulesMap = {
  /**
   * ---------------------------------------- 特殊处理场景 --------------------------------------------
   */
  // 必填项不能为空
  required: () => ({
    required: true,
    message: "\u5FC5\u586B\u9879\u4E0D\u80FD\u4E3A\u7A7A"
  }),
  // 自定义校验
  validator: (arg) => ({ ...arg }),
  /**
   * ---------------------------------------- 正则方法 --------------------------------------------
   */
  usdtAddress: () => ({
    pattern: /^[A-Za-z\d]{20,60}$/,
    message: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u5730\u5740"
  }),
  userId: () => ({
    pattern: /^[\d]{1,10}$/,
    message: "1-10\u4F4D\u6570\u5B57"
  }),
  username: () => ({
    pattern: /^[a-zA-Z0-9]{3,16}$/,
    message: "3-16\u4F4D\u6570\u5B57\u3001\u5B57\u6BCD\u7684\u7EC4\u5408"
  }),
  // 账号系统密码
  password: () => ({
    pattern: /^[a-zA-Z0-9\S]{6,16}$/,
    message: "6-16\u4F4D\u6570\u5B57\u3001\u5B57\u6BCD\u7684\u7EC4\u5408"
  }),
  //请输入正整数
  integer: () => ({
    pattern: /^[0-9]+$/,
    message: "\u8BF7\u8F93\u5165\u6B63\u6574\u6570"
  }),
  //请输入6位纯数字
  sixNumber: () => ({
    pattern: /^\d{6}$/,
    message: "\u8BF7\u8F93\u51656\u4F4D\u7EAF\u6570\u5B57"
  }),
  //请输入4位以上纯数字
  fourMoreNumber: () => ({
    pattern: /^\d{4,}$/,
    message: "\u8BF7\u8F93\u51654\u4F4D\u4EE5\u4E0A\u7EAF\u6570\u5B57"
  }),
  // 请输入大于0的数字 (含小数)
  decimalExceedZero: () => ({
    pattern: /^(?!0(?:\.0+)?$)(?:[1-9]\d*|0)(?:\.\d+)?$/,
    message: "\u8BF7\u8F93\u5165\u5927\u4E8E0\u7684\u6570\u5B57"
  }),
  // 手机号验证
  cellphone: () => ({
    pattern: /^[\d]{6,20}$/,
    message: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u624B\u673A\u53F7"
  }),
  // 谷歌验证码
  googleCode: () => ({
    pattern: /^[\d]{6}$/,
    message: "\u8BF7\u8F93\u51656\u4F4D\u6570\u5B57"
  }),
  //邮箱账号验证
  email: () => ({
    pattern: /^(\w-*\.*)+@(\w-?)+(\.\w{2,})+$/,
    message: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u90AE\u7BB1\u683C\u5F0F"
  }),
  //网址校验验证
  websiteDomain: () => ({
    pattern: /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-.,@?^=%&:/~+#]*[\w\-@?^=%&/~+#])?/,
    message: "\u8BF7\u8F93\u5165\u4EE5http\u6216https\u5F00\u5934\u7684\u6B63\u786E\u7F51\u5740"
  }),
  // IP地址验证
  ipAddress: () => ({
    pattern: /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/,
    message: "IP\u683C\u5F0F\u4E0D\u6B63\u786E"
  }),
  // 不能小于0
  notZero: () => ({
    required: true,
    validator: (rule, value, callback) => {
      if (value <= 0) {
        callback("\u5FC5\u987B\u5927\u4E8E0");
      }
      callback();
    }
  }),
  /**
   * ---------------------------------------- 以下为动态参数方法 --------------------------------------------
   */
  // 中英文,支持动态数量 (仅支持中英文,输入范围${cStart}-${cEnd}个字符)
  chineseAndEnglishValidate: ({ cStart = 1, cEnd = 32 }) => ({
    pattern: new RegExp(`^[\\u4E00-\\u9FA5a-z]{${cStart},${cEnd}}$`, "i"),
    message: `\u4EC5\u652F\u6301\u4E2D\u82F1\u6587,\u8F93\u5165\u8303\u56F4${cStart}-${cEnd}\u4E2A\u5B57\u7B26`
  }),
  // 数字范围组件验证
  digitRange: () => ({
    required: true,
    validator: (rule, value, callback) => {
      if (!value[0] || !value[1]) {
        callback("\u8BF7\u8F93\u5165\u6700\u5C0F\u503C\u548C\u6700\u5927\u503C");
      }
      callback();
    }
  }),
  /**
   * ---------------------------------------- 以下为自定义方法 --------------------------------------------
   */
  // 多个IP地址的校验，支持容错校验
  multipleIpAddress: () => ({
    validator(rule, value, callback) {
      const ipContentList = utils.getContentOfFields(value);
      const { pattern, message } = rulesMap.ipAddress();
      let validSuccess = true;
      const errorIpList = [];
      ipContentList.forEach((ip) => {
        if (!pattern.test(ip)) {
          errorIpList.push(ip);
          validSuccess = false;
        }
      });
      if (!validSuccess) {
        callback(`${message}\uFF08${errorIpList.join(",")}\uFF09`);
      }
      callback();
    }
  })
};
class RuleUtils {
  /**
   * 获取校验规则方法
   * @template { keyof RulesMap } T
   * @template {typeof RuleUtils} C
   * @param {T} name 类型名， 与ruleConfig的key值对应
   * @param { undefined | null | string } message 校验失败的错误消息
   * @param {RulesOptions} options 其他配置项，用于拓展
   * @return {RuleItem}
   */
  static getRule(name, message, options) {
    const rulesMap2 = this.rulesMap;
    const transform = this.transform;
    if (Object.keys(rulesMap2).includes(name) && isFunction(rulesMap2[name])) {
      const { dynamic = {} } = options ?? {};
      const res = rulesMap2[name](dynamic);
      const dist = {
        trigger: ["blur", "change"],
        ...res,
        ...omit(options, "dynamic")
      };
      if (message) {
        dist.message = message;
      }
      if (transform) {
        dist.transform = transform;
      }
      return dist;
    }
    return {};
  }
  static transform(value) {
    if (isArray(value)) {
      Object.assign(this, { type: "array" });
      return value;
    }
    return value?.toString()?.trim() ?? "";
  }
}
RuleUtils.rulesMap = rulesMap;
export default RuleUtils;
