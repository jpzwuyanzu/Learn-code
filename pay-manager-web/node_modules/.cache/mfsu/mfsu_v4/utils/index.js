import { uniq } from "lodash";
import { v4 as uuidV4 } from "uuid";
export default {
  localStorage: {
    get(key) {
      let val = localStorage.getItem(key);
      try {
        if (val) {
          val = JSON.parse(val);
        }
      } catch (e) {
        console.error(e);
      }
      return val || void 0;
    },
    set(key, val) {
      const _val = typeof val === "object" ? JSON.stringify(val) : val;
      localStorage.setItem(key, _val);
    },
    remove(key) {
      localStorage.removeItem(key);
    }
  },
  /**
   * 过滤字符串空格
   */
  trims: (str, isGlobal = "") => {
    let result;
    result = str.replace(/(^\s+)|(\s+$)/g, "");
    if (isGlobal.toLowerCase() === "g") {
      result = result.replace(/\s/g, "");
    }
    return result;
  },
  /**
   * 多个逗号，多个空格去重后校验
   * 用于数据容错处理
   * @param content 内容
   * @param removeRepeat 是否去掉重复值
   * @returns
   */
  getContentOfFields(content, removeRepeat = false) {
    const formatContent = this.trims(content).replace(/\s+/g, ",").replace(/，/g, ",");
    const result = formatContent.split(",").filter((i) => i !== "").map((i) => this.trims(i));
    return removeRepeat ? uniq(result) : result;
  },
  /**
   * 检验类型
   * @param data
   * @returns
   */
  types(data) {
    return Object.prototype.toString.call(data).split("[object")[1].replace(/\s|\]/g, "").toLowerCase();
  },
  /**
   * 生成uuid
   */
  uuid: () => uuidV4().replace(/-/g, ""),
  /**
   * 去掉 params 所有值为空字符串的属性
   */
  filterParams(params) {
    const result = {};
    Object.keys(params).forEach((key) => {
      if (params[key] !== void 0 && params[key] !== "") {
        result[key] = params[key];
      }
    });
    return result;
  }
};
