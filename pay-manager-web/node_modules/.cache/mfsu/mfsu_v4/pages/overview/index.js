import { useRef, useState } from "react";
import { merge } from "lodash";
import { Select, Row, Col, Spin, Card, Statistic } from "antd";
import { useAsyncEffect } from "ahooks";
import { CreateCard, TablePage, WithButton } from "@/components";
import {
  ProForm,
  ProFormDateRangePicker
} from "@ant-design/pro-components";
import common from "@/utils/common";
import { APP_IS_PAYMENT, System } from "@/constants";
import { useModel } from "umi";
import services from "@/services";
import { ColorEnum } from "@/enums";
import {
  DefaultSetting1,
  DefaultSetting2,
  DefaultSetting3,
  FundList,
  CollectionList,
  PayList
} from "./config";
import "./style.less";
import Notice from "@/pages/overview/notice";
export default () => {
  const rightFormRef = useRef();
  const { merchantList, currencyList } = useModel("global");
  const filterCurrencyList = currencyList.filter(
    (item) => item.value !== System.BaseAll.value
  );
  const [leftLoading, setLeftLoading] = useState(false);
  const [rightLoading, setRightLoading] = useState(false);
  const [tableLoading, setTableLoading] = useState(false);
  const [exportLoading, setExportLoading] = useState(false);
  const [currency, setCurrency] = useState("");
  const [merchant, setMerchant] = useState(merchantList[0].value);
  const [rightDate] = useState(
    common.dateUtils.getDateRange(7)
  );
  const [listDate] = useState(
    common.dateUtils.getDateRange(7)
  );
  const [statisticsDate, setStatisticsDate] = useState("");
  const [leftData, setLeftData] = useState({});
  const [rightData, setRightData] = useState({});
  const getBaseParams = (params = {}) => ({
    currency,
    merchantId: merchant,
    ...params
  });
  const requestLeft = async () => {
    const data = await services.system.overview.getLeft(getBaseParams());
    setLeftData(data);
    setLeftLoading(false);
  };
  const requestRight = async (arg = {}) => {
    setRightLoading(true);
    const params = getBaseParams(arg);
    const data = await services.system.overview.getRight(params);
    setRightData(data);
    setRightLoading(false);
    setStatisticsDate(common.dateUtils.formatDateString(Date.now()));
  };
  const requestList = async (params = {}) => {
    const { originData } = await services.system.overview.getStatisticeList(
      merge({}, params, getBaseParams())
    );
    return {
      success: true,
      data: originData
    };
  };
  const handleExport = async () => {
    setExportLoading(true);
    const data = await services.system.overview.exportStatisticeList({});
    setExportLoading(false);
  };
  const refresh = async () => {
    setLeftLoading(true);
    setRightLoading(true);
    await requestLeft();
    rightFormRef?.current?.submit();
  };
  useAsyncEffect(async () => {
    if (!currency && filterCurrencyList.length) {
      setCurrency(filterCurrencyList[0]?.value);
    }
  }, [filterCurrencyList]);
  useAsyncEffect(async () => {
    if (currency || merchant) {
      await refresh();
    }
  }, [currency, merchant]);
  const RenderExtraLeft = /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Select,
    {
      value: currency,
      style: { width: 180, marginLeft: "10px" },
      disabled: leftLoading || !filterCurrencyList.length,
      onChange: (val) => setCurrency(val),
      options: filterCurrencyList
    }
  ), APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(
    Select,
    {
      value: merchant,
      disabled: rightLoading,
      style: { width: 180, marginLeft: "20px" },
      onChange: (val) => setMerchant(val),
      options: merchantList
    }
  ));
  const RenderExtraRight = /* @__PURE__ */ React.createElement("div", null, "\u7EDF\u8BA1\u65F6\u95F4\uFF1A", statisticsDate || "--");
  const BaseItemRender = (data, originData) => {
    return data.map((item) => {
      const { label, unit, dataIndex, precision } = item;
      const value = originData[dataIndex] ?? 0;
      return /* @__PURE__ */ React.createElement("div", { key: dataIndex, className: "statistic-box" }, /* @__PURE__ */ React.createElement("span", null, label), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          value,
          suffix: unit,
          precision,
          valueStyle: {
            color: +value >= 0 ? ColorEnum.Green : ColorEnum.Red
          }
        }
      ));
    });
  };
  const SearchForm = /* @__PURE__ */ React.createElement(
    ProForm,
    {
      layout: "inline",
      onFinish: requestRight,
      initialValues: {
        date: rightDate
      },
      formRef: rightFormRef
    },
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormDateRangePicker,
      {
        width: "md",
        name: "date",
        label: "\u65E5\u671F",
        fieldProps: {
          allowClear: false,
          presets: common.dateUtils.rangePresets
        },
        transform: (value) => {
          return {
            beginTime: value[0],
            endTime: value[1]
          };
        }
      }
    ))
  );
  const RenderHomeStatistics = /* @__PURE__ */ React.createElement(Row, { gutter: 16, className: "overview" }, /* @__PURE__ */ React.createElement(Col, { ...DefaultSetting1 }, /* @__PURE__ */ React.createElement(Spin, { spinning: leftLoading }, /* @__PURE__ */ React.createElement(Card, { title: "\u8D44\u91D1", bordered: true, className: "statistic-card left" }, BaseItemRender(FundList, leftData)))), /* @__PURE__ */ React.createElement(Col, { ...DefaultSetting2 }, /* @__PURE__ */ React.createElement(Card, { bordered: true, className: "statistic-card right", title: SearchForm }, /* @__PURE__ */ React.createElement(Spin, { spinning: rightLoading }, /* @__PURE__ */ React.createElement(Col, { ...DefaultSetting3 }, /* @__PURE__ */ React.createElement(Card, { title: "\u4EE3\u6536", bordered: true, className: "statistic-card" }, BaseItemRender(CollectionList, rightData))), /* @__PURE__ */ React.createElement(Col, { ...DefaultSetting3 }, /* @__PURE__ */ React.createElement(Card, { title: "\u4EE3\u4ED8", bordered: true, className: "statistic-card" }, BaseItemRender(PayList, rightData)))))));
  const columns = [
    {
      title: "\u65E5\u671F",
      dataIndex: "date",
      initialValue: listDate,
      valueType: "dateRange",
      fieldProps: {
        allowClear: false,
        presets: common.dateUtils.rangePresets
      },
      search: {
        transform: (value) => {
          return {
            beginTime: value[0],
            endTime: value[1]
          };
        }
      },
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u7C7B\u578B",
      dataIndex: "type",
      fieldProps: {
        allowClear: false
      },
      initialValue: System.SystemPaymentType[0].value,
      request: System.BaseRequestAsync(System.SystemPaymentType),
      valueType: "select",
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u65E5\u671F",
      dataIndex: "day",
      valueType: "date",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u6210\u529F\u91D1\u989D",
      dataIndex: "successAmount",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u6210\u529F\u7B14\u6570",
      dataIndex: "successNum",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u6210\u529F\u7387",
      dataIndex: "successRate",
      valueType: "percent",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u624B\u7EED\u8D39",
      dataIndex: "handlingFee",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u53D1\u8D77\u91D1\u989D",
      dataIndex: "initiateAmount",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u53D1\u8D77\u7B14\u6570",
      dataIndex: "initiateNum",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u4EBA\u5DE5\u5904\u7406\u91D1\u989D",
      dataIndex: "artificialAmount",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u4EBA\u5DE5\u5904\u7406\u7B14\u6570",
      dataIndex: "artificialNum",
      valueType: "digit",
      hideInSearch: true,
      hideInForm: true
    }
  ];
  return /* @__PURE__ */ React.createElement(
    CreateCard,
    {
      moduleTitle: ["\u603B\u89C8"],
      extraRight: RenderExtraRight,
      extraLeft: RenderExtraLeft,
      loading: leftLoading || rightLoading,
      refreshCallback: refresh
    },
    /* @__PURE__ */ React.createElement(Notice, null),
    RenderHomeStatistics,
    /* @__PURE__ */ React.createElement(
      TablePage,
      {
        moduleTitle: "\u6570\u636E\u7EDF\u8BA1",
        columns,
        listRequest: requestList,
        rowKey: "day",
        searchConfig: {
          span: { xs: 24, sm: 24, md: 12, lg: 8, xl: 8, xxl: 6 },
          optionRender: (searchConfig, formProps, dom) => [
            ...dom.reverse(),
            /* @__PURE__ */ React.createElement(
              WithButton,
              {
                key: "export",
                type: "primary",
                className: "ant-btn-export",
                loading: exportLoading,
                onClick: handleExport
              },
              "\u5BFC\u51FA"
            )
          ]
        },
        scroll: { x: 1200 }
      }
    )
  );
};
