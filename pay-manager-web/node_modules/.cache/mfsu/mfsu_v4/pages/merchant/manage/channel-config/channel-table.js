import { Table } from "antd";
import { forwardRef, useEffect, useImperativeHandle, useState } from "react";
import { useAsyncEffect } from "ahooks";
import services from "@/services";
import _ from "lodash";
export default forwardRef((props, ref) => {
  const {
    columns,
    params,
    tableChangeData,
    isSingleMerchant,
    isEdit,
    onRequestData
  } = props;
  const [dataSource, setDataSource] = useState([]);
  const [tunnelList, setTunnelList] = useState([]);
  const [merchantTunnelList, setMerchantTunnelList] = useState([]);
  const [loading, setLoading] = useState(false);
  useEffect(() => {
    const newData = dataSource.map((item) => {
      const changeItem = tableChangeData[item.tunnelId];
      if (changeItem) {
        return {
          ...item,
          ...changeItem
        };
      }
      return item;
    });
    console.log(`newData`, newData);
  }, [tableChangeData]);
  const getData = async () => {
    try {
      setLoading(true);
      const {
        configTunnelList = [],
        merchantTunnelResultsVOS = [],
        merchantManageVO = {}
      } = await services.merchant.manage.findAllConfigTunnel(params);
      if (_.isArray(merchantTunnelResultsVOS)) {
        merchantTunnelResultsVOS.forEach((item) => {
          item.status = item.merchantTunnelStatus;
        });
      }
      setTunnelList(configTunnelList);
      setMerchantTunnelList(merchantTunnelResultsVOS);
      setDataSource(
        isSingleMerchant ? merchantTunnelResultsVOS : configTunnelList
      );
      onRequestData?.({ merchantManageVO });
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    if (isEdit) {
      const mergeTunnelList = tunnelList.map((item) => {
        const merchantItem = merchantTunnelList.find(
          (merchantItem2) => merchantItem2.tunnelId === item.tunnelId
        );
        return {
          ...item,
          ...merchantItem,
          status: merchantItem?.status
        };
      });
      setDataSource(() => [...mergeTunnelList]);
    } else {
      setDataSource(() => [...merchantTunnelList]);
    }
  }, [isEdit]);
  const changeData = (data) => {
    const newData = dataSource.map((item) => {
      if (item.tunnelId === data.tunnelId) {
        return {
          ...item,
          ...data
        };
      }
      return item;
    });
    setDataSource(newData);
  };
  useAsyncEffect(async () => {
    if (params.currency) {
      await getData();
    }
  }, [params.currency]);
  useImperativeHandle(ref, () => ({
    reload: getData,
    changeData
  }));
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Table,
    {
      rowKey: "tunnelId",
      dataSource,
      columns,
      loading: !dataSource.length && loading,
      pagination: false
    }
  ));
});
