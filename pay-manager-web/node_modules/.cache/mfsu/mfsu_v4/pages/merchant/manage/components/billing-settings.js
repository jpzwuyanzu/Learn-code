import { useEffect, useState, useMemo } from "react";
import { Radio, Card, Row, Col, Tabs, Select, InputNumber } from "antd";
import _ from "lodash";
import { MerchantSettleCycleOptions } from "@/constants";
export const billingSettingsItem = {
  "currency": "",
  "rechargeFeeRate": 0,
  "exchangeFeeRate": 0,
  "exchangeSingleFee": 0,
  "rechargeBillingCycle": 0,
  "rechargeBillingType": 1
};
const rechargeBillingTypeOptions = [
  { label: "\u81EA\u52A8\u7ED3\u7B97", value: 1 },
  { label: "\u624B\u52A8\u7ED3\u7B97", value: 2 }
];
export default (props) => {
  const { value, onChange } = props;
  const [currencyList, setCurrencyList] = useState([]);
  const [activeKey, setActiveKey] = useState("");
  useEffect(() => {
    setCurrencyList(_.cloneDeep(value || []));
    if (!activeKey) {
      setActiveKey(value?.[0]?.currency || "");
    }
  }, [value]);
  const itemChildren = (item) => {
    const {
      rechargeFeeRate = 0,
      exchangeFeeRate = 0,
      exchangeSingleFee = 0,
      rechargeBillingCycle = 0,
      rechargeBillingType = 1
    } = item;
    return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(Row, { align: "middle" }, /* @__PURE__ */ React.createElement(Col, { style: { width: 120 } }, "\u4EE3\u6536\u8D39\u7387\uFF08%\uFF09:"), /* @__PURE__ */ React.createElement(Col, null, /* @__PURE__ */ React.createElement(
      InputNumber,
      {
        value: rechargeFeeRate,
        onChange: (val) => {
          inputOnChange(val || 0, "rechargeFeeRate");
        },
        style: { width: 180 }
      }
    ))), /* @__PURE__ */ React.createElement(Row, { align: "middle", style: { marginTop: 15 } }, /* @__PURE__ */ React.createElement(Col, { style: { width: 120 } }, "\u4EE3\u4ED8\u8D39\u7387\uFF08%\uFF09:"), /* @__PURE__ */ React.createElement(Col, null, /* @__PURE__ */ React.createElement(
      InputNumber,
      {
        value: exchangeFeeRate,
        onChange: (val) => {
          inputOnChange(val || 0, "exchangeFeeRate");
        },
        style: { width: 180 }
      }
    ))), /* @__PURE__ */ React.createElement(Row, { align: "middle", style: { marginTop: 15 } }, /* @__PURE__ */ React.createElement(Col, { style: { width: 120 } }, "\u4EE3\u4ED8\u5355\u7B14\u624B\u7EED\u8D39:"), /* @__PURE__ */ React.createElement(Col, null, /* @__PURE__ */ React.createElement(
      InputNumber,
      {
        value: exchangeSingleFee,
        onChange: (val) => {
          inputOnChange(val || 0, "exchangeSingleFee");
        },
        style: { width: 180 }
      }
    ))), /* @__PURE__ */ React.createElement(Row, { align: "middle", style: { marginTop: 15 } }, /* @__PURE__ */ React.createElement(Col, { style: { width: 120 } }, "\u4EE3\u6536\u7ED3\u7B97\u5468\u671F:"), /* @__PURE__ */ React.createElement(Col, null, /* @__PURE__ */ React.createElement(
      Select,
      {
        value: rechargeBillingCycle + "",
        options: MerchantSettleCycleOptions,
        onSelect: (val) => {
          console.log(val, activeKey);
          inputOnChange(Number(val), "rechargeBillingCycle");
        },
        style: { width: 180 }
      }
    ))), /* @__PURE__ */ React.createElement(Row, { align: "middle", style: { marginTop: 15 } }, /* @__PURE__ */ React.createElement(Col, { style: { width: 120 } }, "\u4EE3\u6536\u7ED3\u7B97\u65B9\u5F0F:"), /* @__PURE__ */ React.createElement(Col, null, /* @__PURE__ */ React.createElement(
      Radio.Group,
      {
        value: rechargeBillingType,
        options: rechargeBillingTypeOptions,
        onChange: (e) => {
          inputOnChange(e.target.value, "rechargeBillingType");
        }
      }
    ))));
  };
  const inputOnChange = (value2, key) => {
    console.log(value2, key, activeKey);
    const result = _.cloneDeep(currencyList);
    _.forEach(result, (item) => {
      if (item.currency === activeKey) {
        item[key] = value2;
      }
    });
    onChange?.(result);
  };
  const items = useMemo(() => {
    return (currencyList || []).map((item) => ({
      key: item.currency,
      label: item.currency,
      children: itemChildren(item)
    }));
  }, [currencyList, activeKey]);
  return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
    Tabs,
    {
      activeKey,
      items,
      type: "card",
      onChange: (key) => {
        setActiveKey(key);
      }
    }
  ));
};
