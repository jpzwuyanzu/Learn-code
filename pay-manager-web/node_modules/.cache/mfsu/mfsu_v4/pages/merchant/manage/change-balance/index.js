import {
  ModalForm,
  ProFormDigit,
  ProFormText,
  ProFormItem
} from "@ant-design/pro-components";
import services from "@/services";
import {
  Input,
  Select,
  message,
  InputNumber
} from "antd";
import { useRef, useState } from "react";
var balanceType = /* @__PURE__ */ ((balanceType2) => {
  balanceType2["availableBalance"] = "availableBalance";
  balanceType2["unsettledBalance"] = "unsettledBalance";
  balanceType2["freezeBalance"] = "freezeBalance";
  return balanceType2;
})(balanceType || {});
export default (props) => {
  const formRef = useRef();
  const { record, currency } = props;
  const [keywordType, setKeywordType] = useState(
    "availableBalance" /* availableBalance */
  );
  const [keyword, setKeyword] = useState("");
  const placeholderMap = {
    availableBalance: "\u6B63\u6570\u589E\u52A0\u3001\u8D1F\u6570\u51CF\u5C11",
    unsettledBalance: "\u6B63\u6570\u4E3A\u589E\u52A0\u3001\u8D1F\u6570\u4E3A\u51CF\u5C11",
    freezeBalance: "\u6B63\u6570\u4E3A\u51BB\u7ED3\u672A\u7ED3\u7B97\u4F59\u989D\u3001\u8D1F\u6570\u4E3A\u89E3\u51BB"
  };
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      formRef,
      title: "\u4FEE\u6539\u4F59\u989D",
      trigger: /* @__PURE__ */ React.createElement("a", null, "\u4FEE\u6539\u4F59\u989D"),
      layout: "horizontal",
      labelCol: { span: 4 },
      modalProps: {
        onCancel: () => {
          formRef.current?.resetFields();
        }
      },
      onFinish: async (formData) => {
        formData.currency = currency;
        formData.id = record.id;
        formData[keywordType] = keyword;
        await services.merchant.manage.changeBalance(formData);
        message.success("\u4FEE\u6539\u6210\u529F");
        props?.reload();
        return true;
      },
      initialValues: {
        availableBalance: "",
        unsettledBalance: "",
        payBalance: "",
        remark: ""
      }
    },
    /* @__PURE__ */ React.createElement(ProFormItem, { label: "\u53EF\u7528\u4F59\u989D" }, record?.availableBalance),
    /* @__PURE__ */ React.createElement(ProFormItem, { label: "\u672A\u7ED3\u7B97\u4F59\u989D" }, record?.unsettledBalance),
    /* @__PURE__ */ React.createElement(ProFormItem, { label: "\u4EE3\u4ED8\u4F59\u989D" }, record?.payBalance),
    /* @__PURE__ */ React.createElement(ProFormItem, null, /* @__PURE__ */ React.createElement(Input.Group, { compact: true }, /* @__PURE__ */ React.createElement(
      Select,
      {
        defaultValue: "availableBalance" /* availableBalance */,
        style: { width: "140px" },
        onChange: setKeywordType
      },
      /* @__PURE__ */ React.createElement(Select.Option, { value: "availableBalance" /* availableBalance */ }, "\u4FEE\u6539\u53EF\u7528\u4F59\u989D"),
      /* @__PURE__ */ React.createElement(Select.Option, { value: "unsettledBalance" /* unsettledBalance */ }, "\u4FEE\u6539\u672A\u7ED3\u7B97\u4F59\u989D"),
      /* @__PURE__ */ React.createElement(Select.Option, { value: "freezeBalance" /* freezeBalance */ }, "\u4FEE\u6539\u51BB\u7ED3\u4F59\u989D")
    ), /* @__PURE__ */ React.createElement(
      InputNumber,
      {
        style: { width: "calc(100% - 140px)" },
        value: keyword,
        placeholder: placeholderMap[keywordType],
        onChange: (value) => {
          setKeyword(value);
        }
      }
    ))),
    /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        name: "payBalance",
        label: "\u4FEE\u6539\u4EE3\u4ED8\u4F59\u989D",
        placeholder: "\u6B63\u6570\u589E\u52A0\u3001\u8D1F\u6570\u51CF\u5C11",
        min: -9999999999
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormText, { name: "remark", label: "\u5907\u6CE8" })
  );
};
