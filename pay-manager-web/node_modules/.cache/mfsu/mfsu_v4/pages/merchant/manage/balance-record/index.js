import TablePage from "@/components/TablePage";
import services from "@/services";
import { Button, Modal } from "antd";
import { useState } from "react";
import {
  MerchantAccountChangeTypeOptions,
  MerchantAccountTypeOptions,
  System
} from "@/constants";
import common from "@/utils/common";
import { useModel } from "umi";
export default () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const {
    getMerchantOptionItems,
    getCurrencyOptionItems,
    getFirstCurrencyOption
  } = useModel("global");
  const listRequest = (params, sort, filter) => {
    return services.merchant.manage.changeBalanceList(params);
  };
  const columns = [
    {
      title: "\u5546\u6237ID",
      dataIndex: "id",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u8D26\u53D8\u91D1\u989D",
      dataIndex: "amount",
      hideInSearch: true
    },
    {
      title: "\u4F59\u989D",
      dataIndex: "balance",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5546\u6237\u53F7",
      dataIndex: "merchantId",
      valueType: "select",
      request: () => getMerchantOptionItems(),
      fieldProps: {
        defaultValue: "",
        allowClear: false
      }
    },
    {
      title: "\u7C7B\u578B",
      dataIndex: "changeType",
      valueType: "select",
      request: async () => [
        System.BaseAll,
        ...MerchantAccountChangeTypeOptions
      ],
      fieldProps: {
        defaultValue: "",
        allowClear: false
      }
    },
    {
      title: "\u8D26\u6237\u7C7B\u578B",
      dataIndex: "accountType",
      valueType: "select",
      request: async () => [System.BaseAll, ...MerchantAccountTypeOptions],
      fieldProps: {
        defaultValue: "",
        allowClear: false
      },
      order: 1
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: () => getCurrencyOptionItems(),
      fieldProps: {
        defaultValue: "",
        allowClear: false
      },
      hideInForm: true
    },
    {
      title: "\u5907\u6CE8",
      dataIndex: "remark",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      hideInForm: true
    },
    {
      title: "\u65F6\u95F4",
      dataIndex: "datetime",
      valueType: "dateTimeRange",
      hideInForm: true,
      initialValue: common.dateUtils.getDateRange(1),
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      search: {
        transform: (value) => {
          return {
            beginTime: value[0],
            endTime: value[1]
          };
        }
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      },
      colSize: 1.5,
      hideInTable: true
    },
    {
      title: "\u66F4\u65B0\u65F6\u95F4",
      dataIndex: "updateTime",
      hideInSearch: true
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsModalOpen(true) }, "\u4FEE\u6539\u4F59\u989D\u8BB0\u5F55"), /* @__PURE__ */ React.createElement(
    Modal,
    {
      title: "\u4FEE\u6539\u4F59\u989D\u8BB0\u5F55",
      open: isModalOpen,
      footer: null,
      width: 1400,
      onOk: () => {
        setIsModalOpen(false);
      },
      onCancel: () => {
        setIsModalOpen(false);
      }
    },
    /* @__PURE__ */ React.createElement("div", { className: "modal-table" }, /* @__PURE__ */ React.createElement(
      TablePage,
      {
        hiddenToolBar: true,
        columns,
        cardBordered: {
          search: true,
          table: false
        },
        searchConfig: {
          span: 6,
          labelWidth: 75
        },
        pageSize: 10,
        listRequest
      }
    ))
  ));
};
