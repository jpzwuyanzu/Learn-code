import TablePage from "@/components/TablePage";
import services from "@/services";
import { Input, Select, Tag } from "antd";
import {
  MerchantSettleCycleOptions,
  StatusSelectItems,
  System
} from "@/constants";
import { useRef, useState } from "react";
import BalanceRecord from "./balance-record";
import NotifyRecord from "@/pages/merchant/manage/notify-record";
import ChannelConfig from "@/pages/merchant/manage/channel-config";
import { useModel } from "umi";
import _ from "lodash";
import ChangeBalance from "@/pages/merchant/manage/change-balance";
import { useAsyncEffect } from "ahooks";
import BillingSettings, {
  billingSettingsItem
} from "@/pages/merchant/manage/components/billing-settings";
export default () => {
  const tableRef = useRef();
  const defaultKeywordType = "id";
  const [keywordType, setKeywordType] = useState(defaultKeywordType);
  const [keyword, setKeyword] = useState("");
  const searchFormRef = useState();
  const {
    getMerchantOptionItems,
    getCurrencyOptionItems,
    getFirstCurrencyOption
  } = useModel("global");
  const [currency, setCurrency] = useState("");
  useAsyncEffect(async () => {
    const firstCurrency = await getFirstCurrencyOption();
    searchFormRef?.current?.setFieldValue("currency", firstCurrency);
    setCurrency(firstCurrency);
  }, []);
  const listRequest = async (params, sort, filter) => {
    if (!params.currency) {
      params.currency = await getFirstCurrencyOption();
    }
    if (params.rechargeBillingCycle) {
      params.rechargeBillingCycle = Number(params.rechargeBillingCycle);
    }
    setCurrency(params.currency);
    if (keyword) {
      params[keywordType] = keyword;
    }
    return services.merchant.manage.list(params);
  };
  const detailRequest = async (record) => {
    const detail = _.cloneDeep(record);
    detail.currency = detail.currency.split(",");
    return detail;
  };
  const onFormValuesChange = (values, formRef) => {
    const { currency: currency2 } = values || {};
    console.log(_.cloneDeep(values), "currency");
    if (currency2) {
      const currencyList = formRef.current?.getFieldValue("currencyList");
      const items = currency2.map((val) => {
        const item = _.find(currencyList, (item2) => item2.currency === val);
        return {
          ...item || billingSettingsItem,
          currency: val
        };
      });
      formRef.current?.setFieldValue("currencyList", items);
      console.log(formRef);
    }
  };
  const columns = [
    {
      title: "\u4E0A\u7EA7\u5546\u6237\u53F7",
      dataIndex: "parentId",
      valueType: "select",
      request: () => getMerchantOptionItems(System.Not),
      fieldProps: {
        defaultValue: null
      },
      hideInTable: true,
      hideInSearch: true
    },
    {
      title: "\u5546\u6237\u53F7",
      dataIndex: "id",
      fieldProps: {
        disabled: true,
        placeholder: "\u81EA\u52A8\u751F\u6210"
      },
      hideInSearch: true
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: () => getCurrencyOptionItems(null),
      fieldProps: {
        allowClear: false
      },
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "",
      renderFormItem: () => {
        return /* @__PURE__ */ React.createElement(Input.Group, { compact: true, style: { marginLeft: 5 } }, /* @__PURE__ */ React.createElement(
          Select,
          {
            defaultValue: defaultKeywordType,
            style: { width: "100px" },
            onChange: setKeywordType
          },
          /* @__PURE__ */ React.createElement(Select.Option, { value: "id" }, "\u5546\u6237ID"),
          /* @__PURE__ */ React.createElement(Select.Option, { value: "name" }, "\u5546\u6237\u540D\u79F0")
        ), /* @__PURE__ */ React.createElement(
          Input,
          {
            style: { width: "calc(100% - 110px)" },
            value: keyword,
            placeholder: keywordType === "id" ? "\u8BF7\u8F93\u5165\u5546\u6237ID" : "\u8BF7\u8F93\u5165\u5546\u6237\u540D\u79F0",
            onChange: (e) => {
              const keyword2 = e.target.value;
              setKeyword(keyword2);
            }
          }
        ));
      },
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u5546\u6237\u540D\u79F0",
      dataIndex: "name",
      hideInSearch: true,
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      }
    },
    {
      title: "\u5907\u6CE8",
      dataIndex: "remark",
      hideInTable: true,
      hideInSearch: true
    },
    {
      title: "\u63D0\u73B0USDT\u5730\u5740",
      dataIndex: "usdt",
      hideInTable: true,
      hideInSearch: true
    },
    {
      title: "\u5F00\u901A\u8D27\u5E01",
      dataIndex: "currency",
      valueType: "select",
      request: () => getCurrencyOptionItems(null),
      fieldProps: {
        allowClear: false,
        mode: "multiple",
        getPopupContainer: (triggerNode) => triggerNode
      },
      formItemProps: {
        rules: [
          {
            required: true,
            message: "\u8BF7\u9009\u62E9\u5F00\u901A\u8D27\u5E01"
          }
        ]
      },
      hideInTable: true,
      hideInSearch: true
    },
    {
      valueType: "dependency",
      name: ["currency"],
      hideInTable: true,
      hideInSearch: true,
      columns: ({ currency: currency2 }) => {
        if (currency2 && currency2.length > 0) {
          return [
            {
              title: "\u7ED3\u7B97\u8BBE\u7F6E",
              dataIndex: "currencyList",
              valueType: "billingSettings",
              renderFormItem: (text, props) => /* @__PURE__ */ React.createElement(BillingSettings, { ...props })
            }
          ];
        }
        return [];
      }
    },
    // {
    //   title: '代收结算周期',
    //   dataIndex: 'billingCycle',
    //   valueType: 'select',
    //   request: async () => MerchantSettleCycleOptions,
    //   fieldProps: {
    //     defaultValue: MerchantSettleCycleOptions[0],
    //   },
    //   hideInTable: true,
    //   hideInForm: true,
    //   hideInSearch: true,
    // },
    {
      title: "\u5F53\u6708\u624B\u7EED\u8D39",
      dataIndex: "fee",
      hideInSearch: true,
      hideInForm: true,
      sorter: (a, b) => a.fee - b.fee
    },
    {
      title: "\u53EF\u7528\u4F59\u989D",
      dataIndex: "availableBalance",
      hideInSearch: true,
      hideInForm: true,
      sorter: (a, b) => a.availableBalance - b.availableBalance
    },
    {
      title: "\u672A\u7ED3\u7B97\u4F59\u989D",
      dataIndex: "unsettledBalance",
      hideInSearch: true,
      hideInForm: true,
      sorter: (a, b) => a.unsettledBalance - b.unsettledBalance
    },
    {
      title: "\u51BB\u7ED3\u4F59\u989D",
      dataIndex: "freezeBalance",
      hideInSearch: true,
      hideInForm: true,
      sorter: (a, b) => a.freezeBalance - b.freezeBalance
    },
    {
      title: "\u4EE3\u4ED8\u4F59\u989D",
      dataIndex: "payBalance",
      hideInSearch: true,
      hideInForm: true,
      sorter: (a, b) => a.payBalance - b.payBalance
    },
    {
      title: "\u5F53\u524D\u4F59\u989D",
      dataIndex: "balance",
      hideInSearch: true,
      hideInForm: true,
      sorter: (a, b) => a.balance - b.balance
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      request: StatusSelectItems,
      render: (text, record) => /* @__PURE__ */ React.createElement(Tag, { color: record.status === 1 ? "green" : "red" }, text),
      fieldProps: {
        defaultValue: "",
        allowClear: false
      },
      hideInForm: true
    },
    {
      title: "\u7ED3\u7B97\u5468\u671F",
      dataIndex: "rechargeBillingCycle",
      valueType: "select",
      fieldProps: {
        options: MerchantSettleCycleOptions,
        placeholder: "\u8BF7\u9009\u62E9\u7ED3\u7B97\u5468\u671F"
      },
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u521B\u5EFA\u65F6\u95F4",
      dataIndex: "createTime",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5546\u6237\u8D26\u53F7\u6700\u540E\u767B\u5F55\u65F6\u95F4",
      dataIndex: "lastLoginTime",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u4FEE\u6539\u65F6\u95F4",
      dataIndex: "updateTime",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u8C37\u6B4C\u9A8C\u8BC1\u7801",
      dataIndex: "googleCode",
      hideInTable: true,
      hideInSearch: true
    },
    {
      title: "\u652F\u4ED8\u5BC6\u7801",
      dataIndex: "payPassword",
      hideInTable: true,
      hideInSearch: true
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TablePage,
    {
      tableRef,
      searchFormRef,
      moduleName: "\u5546\u6237",
      moduleTitle: "\u5546\u6237\u7BA1\u7406",
      columns,
      onFormValuesChange,
      addRequest: services.merchant.manage.add,
      listRequest,
      detailRequest,
      editRequest: services.merchant.manage.edit,
      changeStatusRequest: services.merchant.manage.changeStatus,
      beforeRequestFormat: (params) => {
        if (params.currency) {
          params.currency = params.currency.join(",");
        }
        return params;
      },
      scroll: { x: 2e3 },
      actionsWidth: 260,
      onReset: () => {
        setKeyword("");
      },
      actions: (record) => [
        /* @__PURE__ */ React.createElement(
          ChangeBalance,
          {
            key: "changeBalance",
            record,
            currency,
            reload: tableRef?.current?.reload
          }
        ),
        /* @__PURE__ */ React.createElement(
          ChannelConfig,
          {
            key: "channelConfig",
            record,
            tag: "a",
            buttonLabel: "\u901A\u9053\u914D\u7F6E",
            reload: tableRef?.current?.reload
          }
        )
      ],
      toolBarActions: (action) => [
        /* @__PURE__ */ React.createElement(BalanceRecord, { key: "changeBalanceRecord" }),
        /* @__PURE__ */ React.createElement(NotifyRecord, { key: "merchantNotify" })
        // <ChannelConfig
        //   key="channelConfig"
        //   reload={tableRef?.current?.reload}
        // />,
      ]
    }
  ));
};
