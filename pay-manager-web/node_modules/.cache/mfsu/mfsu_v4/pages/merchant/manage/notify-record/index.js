import TablePage from "@/components/TablePage";
import services from "@/services";
import { Button, Modal, Tag } from "antd";
import { useState } from "react";
import "./index.less";
import common from "@/utils/common";
import { useModel } from "@@/exports";
export default () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const {
    getMerchantOptionItems,
    getCurrencyOptionItems,
    getFirstCurrencyOption
  } = useModel("global");
  const listRequest = (params, sort, filter) => {
    if (params.createTime) {
      params.beginTime = params.createTime?.[0];
      params.endTime = params.createTime?.[1];
    }
    delete params.createTime;
    if (params.cutoffTime) {
      params.remindBeginTime = params.cutoffTime?.[0];
      params.remindEndTime = params.cutoffTime?.[1];
    }
    delete params.cutoffTime;
    return services.merchant.remind.list(params);
  };
  const columns = [
    {
      title: "\u6D88\u606FID",
      dataIndex: "id",
      hideInSearch: true,
      hideInForm: true,
      width: 100
    },
    {
      title: "\u521B\u5EFA\u65F6\u95F4",
      dataIndex: "createTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      colSize: 2,
      hideInTable: true,
      hideInForm: true
    },
    {
      title: "\u622A\u6B62\u65F6\u95F4",
      dataIndex: "cutoffTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      colSize: 2,
      hideInTable: true,
      hideInForm: true
    },
    {
      title: "\u5546\u6237\u53F7",
      dataIndex: "merchantId",
      valueType: "select",
      request: () => getMerchantOptionItems(null),
      fieldProps: {
        allowClear: false
      },
      formItemProps: {
        rules: [
          {
            required: true,
            message: "\u8BF7\u9009\u62E9\u5546\u6237\u53F7"
          }
        ]
      }
    },
    {
      title: "\u63D0\u9192\u5185\u5BB9",
      dataIndex: "content",
      valueType: "textarea",
      fieldProps: {
        maxLength: 500,
        showCount: true,
        autoSize: {
          minRows: 5
        }
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      },
      hideInSearch: true
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      valueEnum: {
        1: {
          text: "\u5728\u7EBF"
        },
        2: {
          text: "\u4E0B\u7EBF"
        }
      },
      render: (text, record) => /* @__PURE__ */ React.createElement(Tag, { color: record.status === 1 ? "green" : "red" }, text),
      fieldProps: {
        style: {
          width: 120,
          marginRight: 20
        }
      },
      hideInForm: true,
      hideInSearch: true
    },
    {
      title: "\u521B\u5EFA\u65F6\u95F4",
      dataIndex: "createTime",
      hideInForm: true,
      hideInSearch: true
    },
    {
      title: "\u622A\u6B62\u65F6\u95F4",
      dataIndex: "endTime",
      valueType: "dateTime",
      hideInSearch: true
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsModalOpen(true) }, "\u63D0\u9192\u5217\u8868"), /* @__PURE__ */ React.createElement(
    Modal,
    {
      className: "balance-modal",
      title: "\u63D0\u9192\u5217\u8868",
      open: isModalOpen,
      footer: null,
      width: 1400,
      onCancel: () => {
        setIsModalOpen(false);
      }
    },
    /* @__PURE__ */ React.createElement("div", { className: "modal-table" }, /* @__PURE__ */ React.createElement(
      TablePage,
      {
        moduleName: "\u63D0\u9192",
        columns,
        cardBordered: {
          search: true,
          table: false
        },
        searchConfig: {
          labelWidth: 75
        },
        addRequest: services.merchant.remind.add,
        delRequest: services.merchant.remind.del,
        changeStatusRequest: services.merchant.remind.edit,
        listRequest,
        changeStatusMap: { 1: "\u4E0A\u7EBF", 2: "\u4E0B\u7EBF" }
      }
    ))
  ));
};
