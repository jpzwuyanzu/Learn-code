import { Button, message, Modal, Tabs, Row, Col } from "antd";
import { useEffect, useRef, useState } from "react";
import { useModel } from "@@/exports";
import { useAsyncEffect } from "ahooks";
import { ProForm, ProFormItem } from "@ant-design/pro-components";
import ChannelCollectTable from "@/pages/merchant/manage/channel-config/channel-collect-table";
import ChannelPayTable from "@/pages/merchant/manage/channel-config/channel-pay-table";
import common from "@/utils/common";
import services from "@/services";
import CheckboxGroup from "@/components/CheckboxGroup";
import { ChannelTypeEnum } from "@/enums";
export default (props) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const collectTableRef = useRef();
  const payTableRef = useRef();
  const {
    getMerchantOptionItems,
    getCurrencyOptionItems,
    getFirstCurrencyOption
  } = useModel("global");
  const isSingleMerchant = props?.record?.id !== void 0;
  const [currencyOptionItems, setCurrencyOptionItems] = useState([]);
  const [merchantOptionItems, setMerchantOptionItems] = useState([]);
  const [currency, setCurrency] = useState("");
  const [merchantIds, setMerchantIds] = useState([]);
  const [channelType, setChannelType] = useState(
    ChannelTypeEnum.Collect
  );
  const [collectChangeData, setCollectChangeData] = useState({});
  const [paymentChangeData, setPaymentChangeData] = useState({});
  const [loading, setLoading] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [channelData, setChannelData] = useState({});
  const formRef = useRef();
  useEffect(() => {
    setCollectChangeData({});
    setPaymentChangeData({});
    setIsEdit(false);
  }, [currency]);
  useAsyncEffect(async () => {
    if (isModalOpen) {
      if (isSingleMerchant) {
        setMerchantIds([props.record?.id]);
      }
      const currencyOptionItems2 = await getCurrencyOptionItems(null);
      const currencyItems = currencyOptionItems2.map((item) => {
        return {
          label: item.label,
          key: item.value
        };
      });
      setCurrencyOptionItems(currencyItems);
      setCurrency(currencyItems[0].key);
      const merchantOptionItems2 = await getMerchantOptionItems(null);
      setMerchantOptionItems(merchantOptionItems2);
      collectTableRef.current?.reload();
      payTableRef.current?.reload();
    } else {
      setCollectChangeData({});
      setPaymentChangeData({});
      setIsEdit(false);
    }
  }, [isModalOpen]);
  const tunnelConfig = async (type) => {
    const changeData = type === ChannelTypeEnum.Collect ? collectChangeData : paymentChangeData;
    const changeDataLength = Object.values(changeData).length;
    if (changeDataLength) {
      const params = {
        type,
        merchantIds
      };
      if (Object.values(changeData).length) {
        params.merchantTunnelDataDTOList = Object.keys(changeData).map(
          (tunnelId) => {
            const tunnelChangeData = changeData[tunnelId];
            return {
              tunnelId,
              upRate: tunnelChangeData.upRate,
              upSingleOrderFee: tunnelChangeData.upSingleOrderFee,
              merchantRate: tunnelChangeData.merchantRate,
              merchantSingleOrderFee: tunnelChangeData.merchantSingleOrderFee,
              status: tunnelChangeData.status
            };
          }
        );
      }
      await services.merchant.manage.tunnelDistributeList(params);
    }
  };
  const formSubmit = async () => {
    try {
      await formRef.current?.validateFields();
      const changeDataLength = Object.values(collectChangeData).length + Object.values(paymentChangeData).length;
      if (changeDataLength === 0) {
        message.error("\u8BF7\u5148\u4FEE\u6539\u6570\u636E\u518D\u63D0\u4EA4");
        return;
      }
      setLoading(true);
      await tunnelConfig(ChannelTypeEnum.Collect);
      await tunnelConfig(ChannelTypeEnum.Payment);
      message.success("\u64CD\u4F5C\u6210\u529F");
      setCollectChangeData({});
      setPaymentChangeData({});
      setIsModalOpen(false);
      setChannelType(ChannelTypeEnum.Collect);
      props?.reload();
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(false);
    }
  };
  const onChangeData = (data) => {
    console.log(data);
    const tunnelId = data?.tunnelId;
    const changeData = channelType === 1 ? collectChangeData : paymentChangeData;
    const setChangeData = channelType === 1 ? setCollectChangeData : setPaymentChangeData;
    const tunnelChangeData = { ...changeData[tunnelId] || {}, ...data };
    const _changeData = {
      ...changeData,
      [tunnelId]: tunnelChangeData
    };
    setChangeData(_changeData);
  };
  const onRequestData = (data) => {
    setChannelData(data);
  };
  const buttonLabel = props?.buttonLabel || "\u5546\u6237\u901A\u9053\u6279\u91CF\u914D\u7F6E";
  return /* @__PURE__ */ React.createElement(React.Fragment, null, props?.tag === "a" ? /* @__PURE__ */ React.createElement("a", { onClick: () => setIsModalOpen(true) }, buttonLabel) : /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsModalOpen(true) }, buttonLabel), /* @__PURE__ */ React.createElement(
    Modal,
    {
      title: buttonLabel,
      open: isModalOpen,
      footer: null,
      width: 1400,
      destroyOnClose: true,
      onCancel: () => {
        setIsModalOpen(false);
        setMerchantIds([]);
        setIsEdit(false);
      }
    },
    /* @__PURE__ */ React.createElement(ProForm, { submitter: false, formRef }, /* @__PURE__ */ React.createElement("div", { className: "tabs-wrap" }, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        defaultValue: currency,
        items: currencyOptionItems,
        type: "card",
        onChange: setCurrency
      }
    ), /* @__PURE__ */ React.createElement("div", { className: "tabs-content" }, !isSingleMerchant ? /* @__PURE__ */ React.createElement(
      ProFormItem,
      {
        label: "\u64CD\u4F5C\u5546\u6237",
        name: "merchantIds",
        style: { marginBottom: 10 },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u9009\u62E9\u64CD\u4F5C\u5546\u6237")
        ]
      },
      /* @__PURE__ */ React.createElement(
        CheckboxGroup,
        {
          options: merchantOptionItems,
          onChange: setMerchantIds,
          value: merchantIds
        }
      )
    ) : /* @__PURE__ */ React.createElement(Row, { style: { marginBottom: 10 } }, /* @__PURE__ */ React.createElement(Col, null, "\u64CD\u4F5C\u5546\u6237\uFF1A", props?.record?.name || "-"), /* @__PURE__ */ React.createElement(Col, { offset: 1 }, "\u5546\u6237\u4EE3\u6536\u8D39\u7387\uFF1A", channelData?.merchantManageVO?.rechargeFeeRate || 0, "%"), /* @__PURE__ */ React.createElement(Col, { offset: 1 }, "\u5546\u6237\u4EE3\u4ED8\u8D39\u7387\uFF1A", channelData?.merchantManageVO?.exchangeFeeRate || 0, "%+", channelData?.merchantManageVO?.exchangeSingleFee || 0, "\uFF08\u5355\u7B14\uFF09")), /* @__PURE__ */ React.createElement("div", { style: { marginBottom: 10 } }, "\u901A\u9053\u914D\u7F6E\uFF1A"), /* @__PURE__ */ React.createElement("div", { className: "tabs-wrap" }, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        defaultValue: channelType,
        type: "card",
        onChange: (val) => setChannelType(+val),
        items: [
          {
            label: "\u4EE3\u6536",
            key: "1"
          },
          {
            label: "\u4EE3\u4ED8",
            key: "2"
          }
        ]
      }
    ), /* @__PURE__ */ React.createElement("div", { className: "tabs-content" }, /* @__PURE__ */ React.createElement(
      "div",
      {
        style: { display: channelType === 1 ? "block" : "none" }
      },
      /* @__PURE__ */ React.createElement(
        ChannelCollectTable,
        {
          params: { currency, merchantId: props?.record?.id },
          collectChangeData,
          onChangeData,
          tableRef: collectTableRef,
          isSingleMerchant,
          isEdit,
          onRequestData
        }
      ),
      /* @__PURE__ */ React.createElement("div", { style: { marginTop: 10, color: "red" } }, "\u5546\u6237\u8D39\u7387\u7559\u7A7A\uFF0C\u5219\u8D70\u901A\u9053\u9ED8\u8BA4\u8D39\u7387")
    ), /* @__PURE__ */ React.createElement(
      "div",
      {
        style: { display: channelType === 2 ? "block" : "none" }
      },
      /* @__PURE__ */ React.createElement(
        ChannelPayTable,
        {
          params: { currency, merchantId: props?.record?.id },
          paymentChangeData,
          onChangeData,
          tableRef: payTableRef,
          isSingleMerchant,
          isEdit,
          onRequestData
        }
      ),
      /* @__PURE__ */ React.createElement("div", { style: { marginTop: 10, color: "red" } }, "\u5546\u6237\u8D39\u7387&\u7528\u6237\u5355\u7B14\u624B\u7EED\u8D39\u7559\u7A7A\uFF0C\u5219\u8D70\u901A\u9053\u9ED8\u8BA4\u8D39\u7387")
    ))), /* @__PURE__ */ React.createElement("div", { className: "modal-actions" }, /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsModalOpen(false) }, "\u53D6\u6D88"), isSingleMerchant && /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsEdit(!isEdit) }, !isEdit ? "\u901A\u9053\u914D\u7F6E" : "\u53D6\u6D88\u901A\u9053\u914D\u7F6E"), (!isSingleMerchant || isSingleMerchant && isEdit) && /* @__PURE__ */ React.createElement(
      Button,
      {
        loading,
        type: "primary",
        onClick: () => formSubmit()
      },
      "\u786E\u8BA4"
    )))))
  ));
};
