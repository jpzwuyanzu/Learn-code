import TablePage from "@/components/TablePage";
import services from "@/services";
import { Table } from "antd";
import {
  APP_IS_PAYMENT,
  MerchantAccountChangeTypeOptions,
  MerchantAccountTypeOptions
} from "@/constants";
import { useState } from "react";
import common from "@/utils/common";
import { useModel } from "@@/exports";
export default () => {
  const { getMerchantOptionItems, getCurrencyOptionItems } = useModel("global");
  const [statisticData, setStatisticData] = useState({ amount: "" });
  const listRequest = async (params, sort, filter) => {
    const { data, total, records } = await services.merchant.record.list(
      params
    );
    setStatisticData(data);
    return {
      success: true,
      data: records,
      total
    };
  };
  const columns = [
    {
      title: "\u6D41\u6C34\u53F7",
      dataIndex: "orderId",
      order: 5
    },
    {
      title: "\u5546\u6237\u53F7",
      dataIndex: "merchantId",
      hideInSearch: !APP_IS_PAYMENT
    },
    {
      title: "\u8D26\u53D8\u524D\u4F59\u989D",
      dataIndex: "beforeAmount",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u4F59\u989D",
      dataIndex: "balance",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u8D26\u53D8\u91D1\u989D",
      dataIndex: "amount",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: () => getCurrencyOptionItems(),
      fieldProps: {
        defaultValue: "",
        allowClear: false
      },
      hideInForm: true
    },
    // {
    //   title: '账变类型',
    //   dataIndex: 'changeTypeList',
    //   valueType: 'select',
    //   fieldProps: {
    //     mode: 'multiple',
    //     allowClear: false,
    //   },
    //   request: async () => [...MerchantAccountChangeTypeOptions],
    //   hideInTable: true,
    // },
    {
      title: "\u8D26\u53D8\u7C7B\u578B",
      dataIndex: "changeType",
      valueType: "select",
      request: async () => MerchantAccountChangeTypeOptions,
      fieldProps: {
        mode: "multiple",
        allowClear: false
      },
      search: {
        transform: (value) => {
          return {
            changeTypeList: value
          };
        }
      },
      order: 8
    },
    {
      title: "\u8D26\u6237\u7C7B\u578B",
      dataIndex: "accountType",
      valueType: "select",
      fieldProps: {
        defaultValue: ""
      },
      request: async () => [
        {
          label: "\u5168\u90E8",
          value: ""
        },
        ...MerchantAccountTypeOptions
      ]
    },
    {
      title: "\u65F6\u95F4",
      dataIndex: "datetime",
      valueType: "dateTimeRange",
      hideInForm: true,
      initialValue: common.dateUtils.getDateRange(7),
      fieldProps: () => {
        return {
          placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
          presets: common.dateUtils.rangePresets,
          showTime: {
            defaultValue: common.dateUtils.rangeDefaultTime()
          }
        };
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      },
      search: {
        transform: (value) => {
          return {
            beginTime: value?.[0],
            endTime: value?.[1]
          };
        }
      },
      render: (text, record) => record?.updateTime,
      colSize: 1.5,
      order: 9
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TablePage,
    {
      moduleTitle: "\u5546\u6237\u8D26\u53D8\u8BB0\u5F55",
      columns,
      listRequest,
      exportRequest: services.merchant.record.export,
      polling: 3e3,
      summary: (pageData) => {
        return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Table.Summary.Row, null, /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 0, align: "center" }, "\u603B\u8BA1"), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 1 }), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 2 }), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 3 }), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 4, align: "center" }, statisticData?.amount), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 4 }), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 5 }), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 6 }), /* @__PURE__ */ React.createElement(Table.Summary.Cell, { index: 7 })));
      }
    }
  ));
};
