import TablePage from "@/components/TablePage";
import services from "@/services";
import { message, Spin, Statistic } from "antd";
import {
  APP_IS_PAYMENT,
  CallbackStatusOptions,
  IS_TEST,
  PayStatusOptions
} from "@/constants";
import { useRef, useState } from "react";
import common from "@/utils/common";
import { useModel } from "@@/exports";
import Status from "@/components/Status";
import PayFail from "@/pages/merchant/pay-order/pay-fail";
import ChangeOrderStatus from "@/components/ChangeOrderStatus";
import { LoadingOutlined } from "@ant-design/icons";
import utils from "@/utils";
export default () => {
  const tableRef = useRef();
  const tabRef = useRef();
  const { getMerchantOptionItems, getCurrencyOptionItems } = useModel("global");
  const { merchantInfo } = useModel("merchant");
  const [statisticData, setStatisticData] = useState({
    payAmount: "",
    payCount: "",
    successAmount: "",
    successCount: "",
    successFee: "",
    successRate: "",
    waitCallbackAmount: "",
    waitCallbackCount: "",
    waitPayAmount: "",
    waitPayCount: ""
  });
  const [refreshLoadingMap, setRefreshLoadingMap] = useState({});
  const listRequest = async (params, sort, filter) => {
    const { records, data, total } = await services.merchant.payOrder.list(
      utils.filterParams(params)
    );
    setStatisticData(data);
    return {
      success: true,
      data: records,
      total
    };
  };
  const refresh = async (record) => {
    try {
      if (refreshLoadingMap?.[record?.id])
        return;
      setRefreshLoadingMap({
        ...refreshLoadingMap,
        [record.id]: true
      });
      const { platformOrderId, merchantId } = record;
      const params = {
        merchantId,
        platformOrderId
      };
      await services.merchant.collectOrder.refresh(params);
      const rowData = await services.merchant.payOrder.queryOrder(params);
      tabRef?.current?.updateRow(rowData);
      message.success("\u5237\u65B0\u6210\u529F");
    } finally {
      setRefreshLoadingMap({
        ...refreshLoadingMap,
        [record.id]: false
      });
    }
  };
  const orderCallback = async (record) => {
    const { platformOrderId, merchantId } = record;
    await services.merchant.payOrder.callback({
      platformOrderId,
      merchantId
    });
    message.success("\u56DE\u8C03\u6210\u529F");
    tableRef.current?.reload();
  };
  const makeOrder = async (record) => {
    const { platformOrderId, merchantId } = record;
    await services.merchant.payOrder.makeOrder({
      platformOrderId,
      merchantId
    });
    message.success("\u8865\u5355\u6210\u529F");
    tableRef.current?.reload();
  };
  const rejectOrder = async (record) => {
    const { platformOrderId, merchantId } = record;
    await services.merchant.payOrder.rejectOrder({
      platformOrderId,
      merchantId
    });
    message.success("\u9A73\u56DE\u6210\u529F");
    tableRef.current?.reload();
  };
  const columns = [
    // {
    //   title: '通道类型',
    //   dataIndex: 'tunnelId',
    //   valueType: 'select',
    //   request: async () => services.channel.getTunnelOptions(2),
    //   hideInTable: true,
    // },
    {
      title: "\u901A\u9053ID",
      dataIndex: "tunnelId",
      valueType: "select",
      request: () => {
        const params = { type: 2 };
        if (!APP_IS_PAYMENT) {
          params["merchantId"] = merchantInfo.merchantId;
        }
        return services.channel.getTunnelOptions(params);
      },
      hideInTable: true,
      hideInForm: true
    },
    {
      title: "\u5546\u6237\u53F7",
      dataIndex: "merchantId",
      hideInSearch: !APP_IS_PAYMENT
    },
    {
      title: "\u8BA2\u5355\u53F7",
      dataIndex: "orderId",
      hideInSearch: true,
      width: 280,
      ellipsis: true,
      render: (_, record) => /* @__PURE__ */ React.createElement("div", { className: "text-left" }, /* @__PURE__ */ React.createElement("div", null, "\u5E73\u53F0\uFF1A", record?.platformOrderId || "-"), /* @__PURE__ */ React.createElement("div", null, "\u5546\u6237\uFF1A", record?.merchantOrderId || "-"), /* @__PURE__ */ React.createElement("div", null, "\u901A\u9053\uFF1A", record?.tunnelOrderId || "-"), /* @__PURE__ */ React.createElement("div", null, "UTR\uFF1A", record?.utr || "-"))
    },
    {
      title: "\u5E73\u53F0\u8BA2\u5355\u53F7",
      dataIndex: "platformOrderId",
      hideInTable: true,
      fieldProps: (form) => {
        return {
          onChange: (e) => {
            const value = e.target.value;
            if (value?.length) {
              form?.setFieldValue?.(
                "datetime",
                common.dateUtils.getDateRange(30)
              );
            }
          }
        };
      }
    },
    {
      title: "\u5546\u6237\u8BA2\u5355\u53F7",
      dataIndex: "merchantOrderId",
      hideInTable: true,
      fieldProps: (form) => {
        return {
          onChange: (e) => {
            const value = e.target.value;
            if (value?.length) {
              form?.setFieldValue?.(
                "datetime",
                common.dateUtils.getDateRange(30)
              );
            }
          }
        };
      }
    },
    {
      title: "UTR",
      dataIndex: "utr",
      hideInTable: true
    },
    {
      title: "\u901A\u9053\u4FE1\u606F",
      dataIndex: "channel",
      hideInSearch: true,
      width: 150,
      render: (_, record) => /* @__PURE__ */ React.createElement("div", { className: "text-left" }, /* @__PURE__ */ React.createElement("div", null, "\u8D26\u53F7ID\uFF1A", record?.tunnelId || "-"))
    },
    {
      title: "\u8F6C\u8D26\u4FE1\u606F",
      dataIndex: "transfer",
      hideInSearch: true,
      width: 250,
      render: (_, record) => /* @__PURE__ */ React.createElement("div", { className: "text-left" }, /* @__PURE__ */ React.createElement("div", null, "\u94F6\u884C\u7F16\u53F7\uFF1A", record?.bankCode || "-"), /* @__PURE__ */ React.createElement("div", null, "\u94F6\u884C\u540D\u79F0\uFF1A", record?.bankName || "-"), /* @__PURE__ */ React.createElement("div", null, "\u94F6\u884C\u8D26\u53F7\uFF1A", record?.account || "-"), /* @__PURE__ */ React.createElement("div", null, "IFSC\uFF1A", record?.subBranch || "-"), /* @__PURE__ */ React.createElement("div", null, "\u6536\u6B3E\u4EBA\uFF1A", record?.name || "-"), /* @__PURE__ */ React.createElement("div", null, "\u624B\u673A\u53F7\uFF1A", record?.phone || "-"))
    },
    {
      title: "\u8BA2\u5355\u91D1\u989D",
      dataIndex: "amount",
      valueType: "digitRange",
      fieldProps: {
        placeholder: ["\u6700\u5C0F\u91D1\u989D", "\u6700\u5927\u91D1\u989D"]
      },
      search: {
        transform: (value) => {
          return {
            startAmount: value[0],
            endAmount: value[1]
          };
        }
      },
      render: (_, record) => record?.amount
    },
    {
      title: "\u6536\u6B3E\u8D26\u53F7",
      dataIndex: "payeeAccount",
      hideInTable: true
    },
    {
      title: "\u624B\u7EED\u8D39",
      dataIndex: "fee",
      hideInSearch: true
    },
    {
      title: "\u7ED3\u7B97\u91D1\u989D",
      dataIndex: "settlementAmount",
      hideInSearch: true
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      hideInSearch: true,
      width: 140,
      render: (_, record) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", null, "\u652F\u4ED8\uFF1A", /* @__PURE__ */ React.createElement(Status, { type: "pay", val: record?.payStatus })), /* @__PURE__ */ React.createElement("div", null, "\u56DE\u8C03\uFF1A", /* @__PURE__ */ React.createElement(Status, { type: "callback", val: record?.callbackStatus })))
    },
    {
      title: "\u652F\u4ED8\u72B6\u6001",
      dataIndex: "payStatus",
      valueType: "select",
      request: async () => [{ label: "\u5168\u90E8", value: "" }, ...PayStatusOptions],
      hideInTable: true
    },
    {
      title: "\u56DE\u8C03\u72B6\u6001",
      dataIndex: "callbackStatus",
      valueType: "select",
      request: async () => [
        { label: "\u5168\u90E8", value: "" },
        ...CallbackStatusOptions
      ],
      hideInTable: true
    },
    {
      title: "\u53D1\u8D77\u65F6\u95F4",
      dataIndex: "datetime",
      valueType: "dateTimeRange",
      initialValue: common.dateUtils.getDateRange(1),
      fieldProps: (form) => {
        return {
          placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
          allowClear: false,
          presets: common.dateUtils.rangePresets,
          showTime: {
            defaultValue: common.dateUtils.rangeDefaultTime()
          }
        };
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      },
      search: {
        transform: (value) => {
          return {
            beginTime: value?.[0],
            endTime: value?.[1]
          };
        }
      },
      width: 150,
      colSize: 1.5,
      render: (_, record) => record?.createTime
    },
    {
      title: "\u5B8C\u6210\u65F6\u95F4",
      dataIndex: "completeTime",
      valueType: "dateTimeRange",
      fieldProps: (form) => {
        return {
          placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
          allowClear: false,
          presets: common.dateUtils.rangePresets,
          showTime: {
            defaultValue: common.dateUtils.rangeDefaultTime()
          }
        };
      },
      search: {
        transform: (value) => {
          return {
            finishBeginTime: value?.[0],
            finishEndTime: value?.[1]
          };
        }
      },
      colSize: 1.5,
      hideInTable: true
    },
    {
      title: "\u56DE\u8C03\u65F6\u95F4",
      dataIndex: "callbackTime",
      width: 150,
      hideInSearch: true
    },
    {
      title: "\u64CD\u4F5C\u5907\u6CE8",
      dataIndex: "remark",
      hideInSearch: true,
      width: 150,
      ellipsis: true
    },
    // {
    //   title: '币种',
    //   dataIndex: 'currency',
    //   valueType: 'select',
    //   request: () => getCurrencyOptionItems(),
    //   fieldProps: {
    //     defaultValue: '',
    //   },
    //   order: 1,
    //   width: 140,
    // },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      hideInSearch: true
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TablePage,
    {
      ref: tabRef,
      tableRef,
      moduleTitle: "\u4EE3\u4ED8\u8BA2\u5355",
      columns,
      listRequest,
      exportRequest: services.merchant.payOrder.export,
      rowKey: "platformOrderId",
      scroll: { x: 2100 },
      actionsWidth: APP_IS_PAYMENT ? 280 : 140,
      actions: (record) => {
        const isPayment = APP_IS_PAYMENT;
        const created = record?.payStatus === 0;
        const paid = record?.payStatus === 1;
        const noPaid = record?.payStatus === 2;
        const call = record?.callbackStatus === 1;
        return [
          (!paid || !call) && /* @__PURE__ */ React.createElement(
            "a",
            {
              key: "refresh",
              className: refreshLoadingMap?.[record?.id] ? "loading" : "",
              onClick: () => refresh(record)
            },
            refreshLoadingMap?.[record?.id] ? /* @__PURE__ */ React.createElement(
              Spin,
              {
                indicator: /* @__PURE__ */ React.createElement(LoadingOutlined, { size: 12 }),
                size: "small"
              }
            ) : "\u5237\u65B0"
          ),
          isPayment && !call && (paid || noPaid) && /* @__PURE__ */ React.createElement(
            "a",
            {
              key: "callback",
              className: "text-orange",
              onClick: () => orderCallback(record)
            },
            "\u56DE\u8C03"
          ),
          isPayment && created && /* @__PURE__ */ React.createElement(
            "a",
            {
              key: "makeOrder",
              className: "text-green",
              onClick: () => makeOrder(record)
            },
            "\u8865\u5355"
          ),
          isPayment && created && /* @__PURE__ */ React.createElement(
            "a",
            {
              key: "return",
              className: "text-red",
              onClick: () => rejectOrder(record)
            },
            "\u9A73\u56DE"
          ),
          noPaid && /* @__PURE__ */ React.createElement(PayFail, { key: "payFail", record }),
          IS_TEST && record?.payStatus === 0 && /* @__PURE__ */ React.createElement(
            ChangeOrderStatus,
            {
              key: "changeOrderStatus",
              record,
              reload: tableRef?.current?.reload,
              request: services.merchant.payOrder.updatePayStatus
            }
          )
        ];
      },
      footer: () => /* @__PURE__ */ React.createElement("div", { className: "footer-statistic" }, /* @__PURE__ */ React.createElement("div", { className: "row" }, /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u4EE3\u4ED8\u7B14\u6570",
          value: statisticData?.payCount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u4EE3\u4ED8\u603B\u91D1\u989D",
          value: statisticData?.payAmount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u6210\u529F\u624B\u7EED\u8D39",
          value: statisticData?.successFee || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5F85\u8F6C\u8D26\u7B14\u6570",
          value: statisticData?.waitPayCount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5F85\u56DE\u8C03\u7B14\u6570",
          value: statisticData?.waitCallbackCount || 0
        }
      )), /* @__PURE__ */ React.createElement("div", { className: "row" }, /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u6210\u529F\u7B14\u6570",
          value: statisticData?.successCount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u6210\u529F\u603B\u91D1\u989D",
          value: statisticData?.successAmount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u6210\u529F\u7387",
          value: statisticData?.successRate || 0,
          suffix: "%"
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5F85\u8F6C\u8D26\u91D1\u989D",
          value: statisticData?.waitPayAmount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5F85\u56DE\u8C03\u91D1\u989D",
          value: statisticData?.waitCallbackAmount || 0
        }
      )))
    }
  ));
};
