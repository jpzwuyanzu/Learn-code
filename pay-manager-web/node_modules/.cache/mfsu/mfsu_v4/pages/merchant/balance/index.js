import { Line } from "@antv/g2plot";
import { useRef, useState } from "react";
import { useAsyncEffect } from "ahooks";
import services from "@/services";
import "./index.less";
import { Card } from "antd";
import { BetaSchemaForm } from "@ant-design/pro-components";
import dayjs from "dayjs";
import common from "@/utils/common";
import { useModel } from "@@/exports";
import _ from "lodash";
import {
  APP_IS_PAYMENT,
  MerchantAccountChangeTypeOptions,
  MerchantAccountTypeOptions
} from "@/constants";
export default () => {
  const { getMerchantOptionItems, getCurrencyOptionItems } = useModel("global");
  const { merchantInfo } = useModel("merchant");
  const formRef = useRef();
  const [chart, setChart] = useState(null);
  const [initialValues, setInitialValues] = useState({
    merchantId: "",
    currency: ""
  });
  const accountTypeOptions = MerchantAccountTypeOptions.filter(
    (item) => item.value !== 4
  );
  useAsyncEffect(async () => {
    await formRef?.current?.validateFields();
    formRef.current?.submit();
  }, [initialValues]);
  const createItemDom = (item) => {
    const itemDom = document.createElement("div");
    const notFirstOrLast = !item.isFirst && !item.isLast;
    if (item.data.changeTypeName) {
      const accountTypeDom = document.createElement("div");
      accountTypeDom.innerHTML = `\u8D26\u53D8\u7C7B\u578B: ${item.data.changeTypeName}`;
      itemDom.appendChild(accountTypeDom);
    }
    if (item.data.amount) {
      const amountDom = document.createElement("div");
      amountDom.innerHTML = `\u8D26\u53D8\u91D1\u989D: ${_.ceil(item.data.amount, 2)}`;
      itemDom.appendChild(amountDom);
    }
    const balanceDom = document.createElement("div");
    balanceDom.innerHTML = `\u8D26\u6237\u4F59\u989D: ${_.ceil(item.data.balance, 2)}`;
    itemDom.appendChild(balanceDom);
    return itemDom;
  };
  useAsyncEffect(async () => {
    const lineChart = new Line("chart", {
      customInfo: void 0,
      data: [],
      padding: "auto",
      xField: "createTime",
      yField: "balance",
      seriesField: "accountTypeName",
      height: 800,
      xAxis: {
        type: "time"
      },
      point: {
        size: 3,
        shape: "circle",
        style: {
          fill: "white",
          stroke: "#5B8FF9",
          lineWidth: 1
        }
      },
      smooth: true,
      tooltip: {
        shared: false,
        showTitle: true,
        customContent: (title, items) => {
          const container = document.createElement("div");
          const titleDom = document.createElement("div");
          titleDom.innerHTML = _.first(items)?.data?.createTime;
          container.appendChild(titleDom);
          container.className = "g2-custom-tooltip";
          items.forEach((item) => {
            const itemDom = createItemDom(item);
            container.appendChild(itemDom);
          });
          return container;
        }
      }
    });
    lineChart.render();
    setChart(lineChart);
  }, []);
  const columns = [
    {
      title: "\u65E5\u671F",
      dataIndex: "datetime",
      valueType: "dateTimeRange",
      initialValue: common.dateUtils.getInitDate(1),
      fieldProps: (form) => {
        return {
          placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
          presets: common.dateUtils.rangePresets,
          showTime: {
            defaultValue: common.dateUtils.rangeDefaultTime()
          }
        };
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      },
      colSize: 1.5
    },
    {
      title: "\u5546\u6237",
      dataIndex: "merchantId",
      valueType: "select",
      hideInForm: !APP_IS_PAYMENT,
      request: async () => {
        const items = await getMerchantOptionItems(null);
        formRef?.current?.setFieldValue("merchantId", items[0].value);
        setInitialValues({ ...initialValues, merchantId: items[0].value });
        return items;
      },
      fieldProps: {
        placeholder: "\u8BF7\u9009\u62E9\u5546\u6237",
        allowClear: false
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      }
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: async () => {
        const items = await getCurrencyOptionItems(null);
        formRef?.current?.setFieldValue("currency", items[0].value);
        setInitialValues({ ...initialValues, currency: items[0].value });
        return items;
      },
      fieldProps: {
        placeholder: "\u8BF7\u9009\u62E9\u5E01\u79CD",
        allowClear: false,
        style: {
          width: 140
        }
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      }
    },
    {
      title: "\u8D26\u6237\u7C7B\u578B",
      dataIndex: "accountTypeList",
      valueType: "select",
      fieldProps: {
        placeholder: "\u8BF7\u9009\u62E9\u8D26\u6237\u7C7B\u578B",
        mode: "multiple",
        style: {
          width: 300
        }
      },
      initialValue: accountTypeOptions.map((item) => item.value),
      request: async () => accountTypeOptions,
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      }
    }
  ];
  const accountTypeMap = {};
  MerchantAccountTypeOptions.forEach((item) => {
    accountTypeMap[item.value] = item.label;
  });
  const accountChangeTypeMap = {};
  MerchantAccountChangeTypeOptions.forEach((item) => {
    accountChangeTypeMap[item.value] = item.label;
  });
  const request = async (params) => {
    try {
      if (!APP_IS_PAYMENT) {
        params.merchantId = merchantInfo.merchantId;
      }
      const diffHours = dayjs(params.datetime[1]).diff(
        dayjs(params.datetime[0]),
        "hours"
      );
      chart.update({
        meta: {
          createTime: {
            formatter: (val) => {
              return dayjs(val).format(
                diffHours > 24 ? "MM-DD HH:mm" : "HH:mm"
              );
            }
          }
        }
      });
      params.beginTime = dayjs(params.datetime[0]).format(
        "YYYY-MM-DD HH:mm:ss"
      );
      params.endTime = dayjs(params.datetime[1]).format("YYYY-MM-DD HH:mm:ss");
      delete params.datetime;
      const data = await services.merchant.balance.chart(params);
      const dataItemsAccountType = Object.keys(data);
      const dataItems = Object.values(data);
      let minTime = params.beginTime;
      let maxTime = params.endTime;
      dataItems.forEach((items, index) => {
        items.forEach((item) => {
          item.accountType = dataItemsAccountType[index];
        });
        const firstItem = _.first(items);
        const lastItem = _.last(items);
        if (firstItem?.createTime > minTime) {
          dataItems[index].unshift({
            ...firstItem,
            createTime: minTime,
            balance: firstItem?.balance - firstItem?.amount,
            amount: null,
            isFirst: true
          });
        }
        if (lastItem?.createTime < maxTime) {
          dataItems[index].push({
            ...lastItem,
            createTime: maxTime,
            balance: lastItem?.balance,
            amount: null,
            isLast: true
          });
        }
      });
      const chartData = _.flattenDeep(dataItems);
      chartData.forEach((item) => {
        item.accountTypeName = accountTypeMap[item.accountType];
        if (!item.isLast && !item.isFirst) {
          item.changeTypeName = accountChangeTypeMap[item.changeType];
        }
      });
      chart.changeData(chartData);
    } catch (e) {
      console.log(e);
    }
  };
  return /* @__PURE__ */ React.createElement("div", { className: "merchant-balance" }, /* @__PURE__ */ React.createElement(Card, { title: "\u5546\u6237\u4F59\u989D\u6570\u636E" }, /* @__PURE__ */ React.createElement(
    BetaSchemaForm,
    {
      formRef,
      layout: "inline",
      title: "\u5546\u6237\u4F59\u989D\u6570\u636E",
      onFinish: request,
      columns
    }
  ), /* @__PURE__ */ React.createElement("div", { id: "chart" })));
};
