import { ModalForm } from "@ant-design/pro-components";
import { useRef, useState } from "react";
import { message, Spin, Tree } from "antd";
import services from "@/services";
import { useAsyncEffect } from "ahooks";
import { BaseModalConfig } from "@/constants";
import { cloneDeep, difference } from "lodash";
import utils from "@/utils";
const { TreeNode } = Tree;
export default (props) => {
  const { visible, setVisible, current, refresh, preview = false } = props;
  const [loading, setLoading] = useState(false);
  const [roleTree, setRoleTree] = useState([]);
  const [allIds, setAllIds] = useState([]);
  const [checkedIds, setCheckedIds] = useState([]);
  const formRef = useRef();
  const getCheckedKeys = (roleTree2, checkedKeys) => {
    const AllIds = [];
    const CheckedIds = [];
    const comb = (data, allList, checkedList) => {
      data.forEach((dataItem) => {
        if (dataItem.id && dataItem.label) {
          dataItem.id = String(dataItem.id);
          allList.push(String(dataItem.id));
          if (dataItem.isChecked)
            checkedList.push(String(dataItem.id));
          if (dataItem.children && utils.types(dataItem.children) === "array") {
            comb(dataItem.children, allList, checkedList);
          }
        }
      });
    };
    comb(roleTree2, AllIds, CheckedIds);
    setAllIds(AllIds);
    setCheckedIds(preview ? AllIds : cloneDeep(checkedKeys));
  };
  useAsyncEffect(async () => {
    if (visible) {
      setLoading(true);
      const data = await services.system.account.getUserRouterMenu({ userId: current.userId }).finally(() => setLoading(false));
      if (utils.types(data) === "array") {
        setRoleTree(data);
        setCheckedIds([]);
        getCheckedKeys(data, []);
      }
    }
  }, [visible]);
  const onCheck = (checkedKeys, e) => {
    const checkedId = e.node.props.eventKey;
    let newCheckedIds = cloneDeep(checkedIds);
    const getParentIds = (id) => {
      const parentKeys = [];
      for (let i = 0; i < id.length; i += 1) {
        let item = "";
        if (i % 2 === 0 && i !== 0) {
          item = id.substr(0, i);
          parentKeys.push(item);
        }
      }
      return parentKeys;
    };
    const getChildIds = (id, isIncludeCurrent = false, idMap = allIds) => {
      const childKeys = [];
      idMap.forEach((key) => {
        if (key.includes(id) && key.substr(0, id.length) === id) {
          if (key === id) {
            if (isIncludeCurrent) {
              childKeys.push(key);
            }
          } else {
            childKeys.push(key);
          }
        }
      });
      return childKeys;
    };
    const isRemoveParent = (idList, id) => {
      const parentId = id.substr(0, id.length - 2);
      const childIds = getChildIds(parentId, false, idList);
      if (childIds.length) {
        return idList;
      }
      if (String(parentId).length === 2) {
        return idList.filter((i) => i !== parentId);
      }
      return idList;
    };
    if (e.checked) {
      const parentIds = getParentIds(String(checkedId));
      const childIds = getChildIds(String(checkedId));
      newCheckedIds = newCheckedIds.concat(parentIds, childIds, [checkedId]);
    } else {
      const childIds = getChildIds(String(checkedId), true);
      newCheckedIds = difference(newCheckedIds, childIds);
      if (String(checkedId).length >= 4 && !["2100"].includes(String(checkedId))) {
        newCheckedIds = isRemoveParent(newCheckedIds, String(checkedId));
      }
    }
    setCheckedIds([...new Set(newCheckedIds)]);
  };
  const renderTreeNodeTitle = (item) => {
    if ([2, 4].includes(String(item.id).length)) {
      return /* @__PURE__ */ React.createElement(
        "span",
        {
          style: {
            fontSize: "14px",
            fontWeight: 700,
            padding: "10px 0"
          }
        },
        item.label
      );
    }
    return item.label;
  };
  const renderTreeNodes = (data) => {
    if (!Array.isArray(data)) {
      return /* @__PURE__ */ React.createElement(TreeNode, null);
    }
    return data.map((item) => {
      const styles = String(item.id).length === 2 ? { marginTop: "10px" } : {};
      if (item.children) {
        return /* @__PURE__ */ React.createElement(
          TreeNode,
          {
            title: renderTreeNodeTitle(item),
            key: String(item.id),
            style: styles
          },
          renderTreeNodes(item.children)
        );
      }
      return /* @__PURE__ */ React.createElement(
        TreeNode,
        {
          title: renderTreeNodeTitle(item),
          key: String(item.id),
          style: styles
        }
      );
    });
  };
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: `\u6743\u9650\u67E5\u770B(${current.userName})`,
      formRef,
      open: visible,
      autoFocusFirstInput: true,
      grid: true,
      modalProps: {
        ...BaseModalConfig,
        onCancel: () => setVisible(false)
      },
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 600,
      onFinish: async () => {
        if (loading)
          return;
        const requestParams = {
          roleId: current.roleId,
          menuIds: checkedIds
        };
        setLoading(true);
        await services.system.role.editRoleAuth(requestParams).finally(() => setLoading(false));
        setVisible(false);
        setCheckedIds([]);
        message.success("\u4FEE\u6539\u6210\u529F");
        return true;
      },
      submitter: false,
      initialValues: { username: current?.userName }
    },
    /* @__PURE__ */ React.createElement(Spin, { tip: "Loading...", spinning: loading }, /* @__PURE__ */ React.createElement("div", { className: "role-content" }, roleTree.length ? /* @__PURE__ */ React.createElement(
      Tree,
      {
        checkable: true,
        defaultExpandAll: true,
        defaultExpandParent: true,
        checkStrictly: true,
        autoExpandParent: true,
        disabled: preview,
        checkedKeys: checkedIds,
        onCheck
      },
      renderTreeNodes(roleTree)
    ) : null))
  );
};
