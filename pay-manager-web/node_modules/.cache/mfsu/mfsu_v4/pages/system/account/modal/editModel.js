import {
  ModalForm,
  ProFormText,
  ProFormSelect,
  ProFormRadio,
  ProFormDependency
} from "@ant-design/pro-components";
import { useRef, useState } from "react";
import services from "@/services";
import { useModel } from "umi";
import { isEmpty, pick } from "lodash";
import { System, APP_IS_PAYMENT, BaseModalConfig } from "@/constants";
import { WithButton } from "@/components";
import { useClipboard } from "use-clipboard-copy";
import { useAsyncEffect } from "ahooks";
import common from "@/utils/common";
import { message } from "antd";
export default (props) => {
  const { merchantList } = useModel("global");
  const { userInfo } = useModel("user");
  const filterMerchantList = merchantList.filter(
    (item) => item.value !== System.BaseAll.value
  );
  const { visible, setVisible, current, refresh } = props;
  const defaultGoogleSwitch = current?.googleSwitch || 1;
  const [resetLoading, setResetLoading] = useState(false);
  const [googleKey, setGoogleKey] = useState(current?.googleKey ?? "");
  const formRef = useRef();
  const clipboard = useClipboard({
    onSuccess: () => {
      message.success("\u590D\u5236\u6210\u529F");
    }
  });
  const isAdmin = userInfo?.userName === "admin";
  const isAdd = isEmpty(current);
  let initialValues = {
    googleSwitch: defaultGoogleSwitch,
    status: 0,
    ancestors: []
  };
  if (!isAdd) {
    const data = pick(current, [
      "userId",
      "userName",
      "nickName",
      "roleId",
      "ancestors",
      "googleSwitch",
      "googleKey",
      "status",
      "ips",
      "merchantId"
    ]);
    initialValues = {
      ...data,
      googleSwitch: +data.googleSwitch,
      status: +data.status,
      ancestors: data?.ancestors === "" ? [] : data.ancestors.split(",").map((i) => +i)
    };
  }
  useAsyncEffect(async () => {
    if (visible) {
      setGoogleKey(current.googleKey ?? "");
    }
  }, [visible]);
  const handleResetGoogleKey = async () => {
    let Key = "";
    setResetLoading(true);
    Key = await services.system.account.getInitGoogleKey().finally(() => setResetLoading(false));
    setGoogleKey(Key);
    formRef?.current?.setFieldsValue({ googleKey: Key });
  };
  const handleCopy = () => {
    if (googleKey) {
      clipboard.copy(googleKey);
    }
  };
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: isAdd ? "\u65B0\u589E\u8D26\u53F7" : "\u7F16\u8F91\u8D26\u53F7",
      formRef,
      open: visible,
      autoFocusFirstInput: true,
      grid: true,
      modalProps: {
        ...BaseModalConfig,
        onCancel: () => setVisible(false)
      },
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 700,
      onFinish: async (values) => {
        if (values.ancestors && Array.isArray(values.ancestors)) {
          values.ancestors = values.ancestors.join(",");
        }
        if (isAdd) {
          delete values.confirmPassword;
          await services.system.account.add(values);
        } else {
          values.userId = current.userId;
          await services.system.account.edit(values);
        }
        message.success("\u64CD\u4F5C\u6210\u529F");
        setVisible(false);
        refresh && refresh();
        return true;
      },
      initialValues
    },
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "nickName",
        label: "\u59D3\u540D",
        placeholder: "\u8BF7\u8F93\u5165\u59D3\u540D",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u59D3\u540D")]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "userName",
        label: "\u8D26\u53F7",
        placeholder: "\u8BF7\u8F93\u5165\u8D26\u53F7",
        disabled: !isAdd,
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u8D26\u53F7"),
          common.ruleUtils.getRule("username")
        ]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText.Password,
      {
        name: "password",
        label: "\u767B\u5F55\u5BC6\u7801",
        placeholder: isAdd ? "\u8BF7\u8F93\u5165\u5BC6\u7801" : "\u4E0D\u4FEE\u6539\u8BF7\u7559\u7A7A",
        rules: isAdd ? [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5BC6\u7801"),
          common.ruleUtils.getRule("password")
        ] : [common.ruleUtils.getRule("password")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormDependency, { name: ["password"] }, ({ password }) => {
      if (isAdd || !isAdd && password) {
        return /* @__PURE__ */ React.createElement(
          ProFormText.Password,
          {
            name: "confirmPassword",
            label: "\u786E\u8BA4\u5BC6\u7801",
            placeholder: "\u8BF7\u91CD\u590D\u8F93\u5165\u5BC6\u7801",
            fieldProps: {
              maxLength: 20
            },
            rules: [
              common.ruleUtils.getRule("required", "\u8BF7\u91CD\u590D\u8F93\u5165\u5BC6\u7801"),
              common.ruleUtils.getRule("validator", "", {
                validator: (rule, value, callback) => {
                  const password2 = formRef.current.getFieldFormatValue("password");
                  if (password2 && value && password2 !== value) {
                    return callback("\u4E24\u6B21\u5BC6\u7801\u4E0D\u76F8\u540C\uFF0C\u8BF7\u68C0\u67E5");
                  }
                  return callback();
                }
              })
            ]
          }
        );
      }
    }),
    /* @__PURE__ */ React.createElement(
      ProFormRadio.Group,
      {
        name: "googleSwitch",
        label: "\u8C37\u6B4C\u9A8C\u8BC1\u7801",
        placeholder: "\u8BF7\u9009\u62E9",
        options: System.SystemAccountGoogleList,
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8BBE\u7F6E\u8C37\u6B4C\u9A8C\u8BC1\u7801")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormDependency, { name: ["googleSwitch"] }, ({ googleSwitch }) => {
      if (+googleSwitch === 1) {
        return /* @__PURE__ */ React.createElement(
          ProFormText,
          {
            name: "googleKey",
            label: "\u9A8C\u8BC1\u5668\u79D8\u94A5",
            width: 450,
            disabled: true,
            placeholder: "\u8BF7\u70B9\u51FB\u91CD\u7F6E\u6309\u94AE\u751F\u6210\u5BC6\u94A5",
            addonAfter: /* @__PURE__ */ React.createElement("div", { style: { width: "180px", textAlign: "right" } }, /* @__PURE__ */ React.createElement(
              WithButton,
              {
                auth: true,
                type: "primary",
                onClick: handleResetGoogleKey,
                loading: resetLoading
              },
              "\u91CD\u7F6E"
            ), /* @__PURE__ */ React.createElement(
              WithButton,
              {
                auth: true,
                type: "primary",
                style: { marginLeft: "15px" },
                onClick: handleCopy
              },
              "\u590D\u5236"
            )),
            rules: [
              common.ruleUtils.getRule("required", "\u8BF7\u8BBE\u7F6E\u8C37\u6B4C\u9A8C\u8BC1\u7801")
            ]
          }
        );
      }
    }),
    /* @__PURE__ */ React.createElement(
      ProFormRadio.Group,
      {
        name: "status",
        label: "\u72B6\u6001",
        options: System.SystemAccountStatusList.filter(
          (item) => item.value !== System.BaseAll.value
        ),
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u9009\u62E9\u72B6\u6001")]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormSelect,
      {
        name: "roleId",
        label: "\u540E\u53F0\u89D2\u8272",
        request: services.system.role.optionList,
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u9009\u62E9\u540E\u53F0\u89D2\u8272")]
      }
    ),
    APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(
      ProFormSelect,
      {
        name: "ancestors",
        label: "\u7BA1\u7406\u8303\u56F4",
        mode: "multiple",
        options: filterMerchantList,
        placeholder: "\u672A\u9009\u62E9\u5219\u4E3A\u5168\u90E8"
      }
    ),
    !APP_IS_PAYMENT && isAdmin && /* @__PURE__ */ React.createElement(
      ProFormSelect,
      {
        name: "merchantId",
        label: "\u7ED1\u5B9A\u5546\u6237",
        options: filterMerchantList,
        allowClear: false,
        disabled: !isAdd,
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u9009\u62E9\u7ED1\u5B9A\u5546\u6237")]
      }
    )
  );
};
