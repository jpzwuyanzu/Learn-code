import { useState, useRef } from "react";
import services from "@/services";
import { System, APP_IS_PAYMENT, BaseModalConfig } from "@/constants";
import { TablePage } from "@/components";
import utils from "@/utils";
import common from "@/utils/common";
import { PlusOutlined } from "@ant-design/icons";
import { isEmpty } from "lodash";
import { useModel } from "umi";
import { message, Modal } from "antd";
import PasswordModel from "./modal/passwordModel";
import EditModel from "./modal/editModel";
import RoleUpdateModal from "./modal/roleUpdateModal";
export default () => {
  const { merchantList } = useModel("global");
  const tablePageRef = useRef();
  const [isOpenPwd, setIsOpenPwd] = useState(false);
  const [isOpenEdit, setIsOpenEdit] = useState(false);
  const [current, setCurrent] = useState({});
  const [roleVisible, setRoleVisible] = useState(false);
  const refresh = () => tablePageRef?.current?.reload();
  const handleUpdatePassword = (record) => {
    setCurrent(record);
    setIsOpenPwd(true);
  };
  const handleUpdateEdit = async (record) => {
    if (isEmpty(record)) {
      setCurrent(record);
    } else {
      setCurrent(record);
    }
    setIsOpenEdit(true);
  };
  const handleAuth = async (record) => {
    setCurrent(record);
    setRoleVisible(true);
  };
  const handleUpdateStatus = async (record, title) => {
    const { userId, userName } = record;
    Modal.confirm({
      title,
      content: `\u786E\u8BA4\u8981${title}(${userName})\u8BE5\u8D26\u53F7\u5417\uFF1F`,
      onOk: async () => {
        await services.system.account.changeStatus({
          userId,
          status: +record?.status === 0 ? 1 : 0
        });
        refresh();
        message.success("\u4FEE\u6539\u6210\u529F");
      },
      ...BaseModalConfig
    });
  };
  const columns = [
    {
      title: "\u8D26\u53F7ID",
      dataIndex: "userId",
      hideInForm: true
    },
    {
      title: "\u8D26\u53F7",
      dataIndex: "userName",
      formItemProps: {
        rules: [
          common.ruleUtils.getRule("required"),
          common.ruleUtils.getRule("username")
        ]
      }
    },
    {
      title: "\u59D3\u540D",
      dataIndex: "nickName",
      hideInSearch: true,
      formItemProps: {
        rules: [common.ruleUtils.getRule("required")]
      }
    },
    {
      title: "\u540E\u53F0\u89D2\u8272",
      dataIndex: "roleName",
      valueType: "text",
      hideInSearch: true,
      formItemProps: {
        rules: [common.ruleUtils.getRule("required")]
      }
    },
    {
      title: "\u7BA1\u7406\u8303\u56F4",
      dataIndex: "merchantId",
      valueType: "select",
      fieldProps: {
        allowClear: false
      },
      initialValue: "",
      hideInSearch: !APP_IS_PAYMENT,
      hideInTable: !APP_IS_PAYMENT,
      request: System.BaseRequestAsync(merchantList),
      render(_, record) {
        const { ancestors } = record;
        const ancestorsList = String(ancestors).split(",");
        if (ancestors === "" || ancestorsList.length && ancestorsList.length === merchantList.length - 1) {
          return `\u3010\u5168\u90E8\u3011`;
        }
        const result = [];
        ancestorsList.forEach((id) => {
          merchantList.forEach((item) => {
            if (String(id) === String(item.value)) {
              result.push(item.label);
            }
          });
        });
        return common.antdUtils.renderTips(result.join(","));
      },
      width: 180
    },
    // {
    //   title: '绑定商户',
    //   dataIndex: 'merchantId',
    //   valueType: 'select',
    //   fieldProps: {
    //     allowClear: false,
    //   },
    //   hideInSearch: APP_IS_PAYMENT,
    //   hideInTable: APP_IS_PAYMENT,
    //   request: System.BaseRequestAsync(merchantList),
    //   width: 180,
    // },
    {
      title: "\u9A8C\u8BC1\u7801\u79D8\u94A5",
      dataIndex: "googleKey",
      hideInSearch: true,
      width: 180
    },
    {
      title: "\u9650\u5236IP",
      valueType: "textarea",
      dataIndex: "ip",
      hideInSearch: true,
      formItemProps: {
        rules: [common.ruleUtils.getRule("multipleIpAddress")]
      }
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      fieldProps: {
        allowClear: false,
        defaultValue: ""
      },
      hideInForm: true,
      request: System.BaseRequestAsync(System.SystemAccountStatusList),
      render: (text, record) => common.antdUtils.renderTag(
        System.SystemAccountStatusList,
        +record.status
      )
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "radio",
      request: System.BaseRequestAsync(
        System.SystemAccountStatusList.filter((i) => i.value !== "")
      ),
      hideInSearch: true,
      hideInTable: true
    },
    {
      title: "\u521B\u5EFA\u65F6\u95F4",
      dataIndex: "createTime",
      hideInSearch: true,
      hideInForm: true,
      width: 140
    },
    {
      title: "\u6700\u540E\u767B\u5F55\u65F6\u95F4",
      dataIndex: "loginDate",
      hideInSearch: true,
      hideInForm: true,
      width: 140
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TablePage,
    {
      moduleTitle: "\u8D26\u53F7\u7BA1\u7406",
      moduleName: "\u8D26\u53F7",
      columns,
      beforeRequestFormat: (param) => {
        param.ip = utils.getContentOfFields(param.ip, true).join(",");
        return param;
      },
      listRequest: services.system.account.list,
      scroll: { x: 1200 },
      actionsWidth: APP_IS_PAYMENT ? 240 : 160,
      tableRef: tablePageRef,
      actions: (record) => {
        const isDisabled = +record?.status === 1;
        const statusLabel = isDisabled ? "\u542F\u7528" : "\u7981\u7528";
        return common.antdUtils.renderTableAction([
          {
            label: "\u7F16\u8F91",
            auth: "system-account-edit",
            onClick: () => handleUpdateEdit(record)
          },
          {
            label: "\u6743\u9650",
            auth: "system-account-auth",
            onClick: () => handleAuth(record)
          },
          {
            label: "\u4FEE\u6539\u5BC6\u7801",
            auth: "system-account-edit",
            onClick: () => handleUpdatePassword(record),
            hide: !APP_IS_PAYMENT
          },
          {
            label: statusLabel,
            className: isDisabled ? "text-green" : "text-red",
            auth: "system-account-status",
            onClick: () => handleUpdateStatus(record, statusLabel)
          }
        ]);
      },
      toolBarActions: (record) => common.antdUtils.renderTableAction(
        [
          {
            label: "\u6DFB\u52A0\u8D26\u53F7",
            auth: "system-account-auth",
            type: "primary",
            icon: /* @__PURE__ */ React.createElement(PlusOutlined, null),
            onClick: () => handleUpdateEdit({})
          }
        ],
        true
      )
    }
  ), /* @__PURE__ */ React.createElement(
    PasswordModel,
    {
      visible: isOpenPwd,
      setVisible: setIsOpenPwd,
      current
    }
  ), /* @__PURE__ */ React.createElement(
    EditModel,
    {
      visible: isOpenEdit,
      setVisible: setIsOpenEdit,
      current,
      refresh
    }
  ), /* @__PURE__ */ React.createElement(
    RoleUpdateModal,
    {
      visible: roleVisible,
      setVisible: setRoleVisible,
      current,
      preview: true
    }
  ));
};
