import TablePage from "@/components/TablePage";
import { Input, Select, Modal, message } from "antd";
import { useState, useRef } from "react";
import services from "@/services";
import common from "@/utils/common";
import { BaseModalConfig } from "@/constants";
import utils from "@/utils";
export default () => {
  const tablePageRef = useRef();
  const [keywordType, setKeywordType] = useState("userName");
  const refresh = () => tablePageRef?.current?.reload();
  const handleDelete = async (record) => {
    const { id } = record;
    Modal.confirm({
      title: `\u5220\u9664(${record.ip})`,
      content: `\u786E\u8BA4\u8981\u5220\u9664\u8D26\u53F7(${record.userName})\u7684IP\u767D\u540D\u5355\u5417\uFF1F`,
      onOk: async () => {
        await services.system.ip.del({ id });
        refresh();
        message.success("\u5220\u9664\u6210\u529F");
      },
      ...BaseModalConfig
    });
  };
  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      // hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u540E\u53F0\u8D26\u53F7",
      dataIndex: "userName",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5173\u952E\u5B57",
      dataIndex: "keyword",
      renderFormItem: () => {
        const selectBefore = /* @__PURE__ */ React.createElement(
          Select,
          {
            defaultValue: keywordType,
            style: { width: "120px" },
            onChange: setKeywordType
          },
          /* @__PURE__ */ React.createElement(Select.Option, { value: "userId" }, "\u7528\u6237ID"),
          /* @__PURE__ */ React.createElement(Select.Option, { value: "userName" }, "\u7528\u6237\u540D\u79F0")
        );
        return /* @__PURE__ */ React.createElement(Input, { addonBefore: selectBefore, placeholder: "\u8BF7\u8F93\u5165" });
      },
      hideInSearch: true,
      hideInTable: true,
      formItemProps: {
        rules: [
          common.ruleUtils.getRule("required")
          // common.ruleUtils.getRule('validator', '', {
          //   validator(rule, value, callback) {
          //     if (value && keywordType === 'userName') {
          //       const { pattern, message } = common.ruleUtils.rulesMap.username()
          //       if (!pattern.test(value)) {
          //         return callback(message)
          //       }
          //     }
          //     if (value && keywordType === 'userId') {
          //       const { pattern, message } = common.ruleUtils.rulesMap.userId()
          //       if (!pattern.test(value)) {
          //         return callback(message)
          //       }
          //     }
          //     callback()
          //   },
          // }),
        ]
      }
    },
    {
      title: "\u540E\u53F0\u8D26\u53F7",
      dataIndex: "keyword",
      hideInForm: true,
      hideInTable: true,
      fieldProps: {
        placeholder: "\u8BF7\u8F93\u5165\u8D26\u53F7"
      }
    },
    {
      title: "IP",
      dataIndex: "ip",
      valueType: "textarea",
      formItemProps: {
        rules: [
          common.ruleUtils.getRule("required"),
          common.ruleUtils.getRule("multipleIpAddress")
        ]
      }
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "createName",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u64CD\u4F5C\u65F6\u95F4",
      dataIndex: "createTime",
      hideInSearch: true,
      hideInForm: true
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TablePage,
    {
      moduleName: "\u767D\u540D\u5355",
      moduleTitle: "IP\u7BA1\u7406",
      columns,
      tableRef: tablePageRef,
      beforeRequestFormat: (param) => {
        param[keywordType] = param.keyword;
        param.ips = utils.getContentOfFields(param.ip, true).join(",");
        delete param.ip;
        return param;
      },
      authConfig: {
        addAuth: common.permissionUtils.checkPageResource("system-ip-add")
      },
      actions: (record) => common.antdUtils.renderTableAction([
        {
          label: "\u5220\u9664",
          auth: "system-ip-del",
          className: "text-red",
          onClick: () => handleDelete(record)
        }
      ]),
      actionsWidth: 100,
      addRequest: services.system.ip.add,
      listRequest: services.system.ip.list
    }
  ));
};
