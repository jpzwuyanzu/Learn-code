import {
  ModalForm,
  ProForm,
  ProFormText,
  ProFormDigit
} from "@ant-design/pro-components";
import { useRef } from "react";
import services from "@/services";
import { BaseModalConfig } from "@/constants";
import common from "@/utils/common";
import { ChannelTypeEnum } from "@/enums";
import { message } from "antd";
export default (props) => {
  const { visible, setVisible, current, refresh } = props;
  const formRef = useRef();
  const initialValues = {
    tunnelId: current.tunnelId,
    originBalance: current.balance ?? 0
  };
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: `\u4FEE\u6539\u4F59\u989D(${current.tunnelName})`,
      formRef,
      open: visible,
      autoFocusFirstInput: true,
      grid: true,
      modalProps: {
        ...BaseModalConfig,
        onCancel: () => setVisible(false)
      },
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 600,
      onFinish: async (values) => {
        values.tunnelId = current.tunnelId;
        values.type = ChannelTypeEnum.Collect;
        values.currency = current.currency;
        await services.channel.updateTunnelBalance(values);
        message.success("\u64CD\u4F5C\u6210\u529F");
        setVisible(false);
        refresh && refresh();
        return true;
      },
      initialValues
    },
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "originBalance",
        label: "\u901A\u9053\u4F59\u989D",
        placeholder: "",
        disabled: true
      }
    )),
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        name: "balance",
        label: "\u4FEE\u6539\u901A\u9053\u4F59\u989D",
        placeholder: "\u6B63\u6570\u589E\u52A0\uFF0C\u8D1F\u6570\u51CF\u5C11",
        min: initialValues.originBalance && initialValues.originBalance > 0 ? -initialValues.originBalance : 0,
        max: 1e9,
        fieldProps: { precision: 2 },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u91D1\u989D"),
          common.ruleUtils.getRule("validator", "", {
            validator: (rule, value, callback) => {
              if (![null, void 0, ""].includes(value) && +value === 0) {
                return callback("\u8BF7\u8F93\u5165\u4E0D\u4E3A0\u7684\u6570\u5B57");
              }
              return callback();
            }
          })
        ]
      }
    ))
  );
};
