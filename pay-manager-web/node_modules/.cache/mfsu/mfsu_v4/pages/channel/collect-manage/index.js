import { useState, useRef } from "react";
import { useModel } from "umi";
import { Input, Select, Modal, message } from "antd";
import services from "@/services";
import { System, Channel, BaseModalConfig } from "@/constants";
import common from "@/utils/common";
import { TablePage } from "@/components";
import { ChannelTypeEnum } from "@/enums";
import UpdateBalanceModal from "./modal/updateBalanceModal";
import TunnelDistributeModal from "./modal/tunnelDistributeModal";
import { pick } from "lodash";
import BalanceRecordModal from "@/components/BalanceRecordModal";
export default () => {
  const { currencyList, merchantList } = useModel("global");
  const tablePageRef = useRef();
  const refresh = () => tablePageRef?.current?.reload();
  const defaultKeywordType = "tunnelId";
  const [keywordType, setKeywordType] = useState(defaultKeywordType);
  const [keyword, setKeyword] = useState("");
  const [current, setCurrent] = useState({});
  const [updateBalanceVisible, setUpdateBalanceVisible] = useState(false);
  const [tunnelDistributeVisible, setTunnelDistributeVisible] = useState(false);
  const handleUpdateStatus = async (record, title) => {
    const { tunnelId, tunnelName } = record;
    const requestFn = +record.status === 2 ? services.channel.enableTunnelConfig : services.channel.disableTunnelConfig;
    Modal.confirm({
      title,
      content: `\u786E\u8BA4\u8981${title}(${tunnelName})\u8BE5\u901A\u9053\u5417\uFF1F`,
      onOk: async () => {
        await requestFn({ tunnelId, type: 1 });
        refresh();
        message.success(`${title}\u6210\u529F`);
      },
      ...BaseModalConfig
    });
  };
  const columns = [
    {
      title: "",
      renderFormItem: () => {
        const selectBefore = /* @__PURE__ */ React.createElement(
          Select,
          {
            defaultValue: keywordType,
            style: { width: "120px" },
            onChange: setKeywordType
          },
          /* @__PURE__ */ React.createElement(Select.Option, { value: "tunnelId" }, "\u901A\u9053ID"),
          /* @__PURE__ */ React.createElement(Select.Option, { value: "tunnelName" }, "\u901A\u9053\u540D\u79F0")
        );
        return /* @__PURE__ */ React.createElement(
          Input,
          {
            addonBefore: selectBefore,
            value: keyword,
            allowClear: true,
            placeholder: "\u8BF7\u8F93\u5165",
            onChange: (e) => setKeyword(e.target.value)
          }
        );
      },
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: System.BaseRequestAsync(currencyList),
      fieldProps: {
        allowClear: false
      },
      initialValue: System.BaseAll.value,
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u5F00\u901A\u5546\u6237",
      dataIndex: "merchantId",
      valueType: "select",
      request: System.BaseRequestAsync(merchantList),
      fieldProps: {
        allowClear: false
      },
      initialValue: System.BaseAll.value,
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      fieldProps: {
        allowClear: false
      },
      initialValue: System.BaseAll.value,
      request: System.BaseRequestAsync(Channel.ChannelStatusList),
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u901A\u9053ID",
      dataIndex: "tunnelId",
      valueType: "select",
      request: async () => {
        const { data } = await services.channel.getTunnelIdList({
          type: ChannelTypeEnum.Collect
        });
        if (Array.isArray(data)) {
          return data.map((id) => ({ label: id, value: id }));
        }
        return [];
      },
      copyable: true,
      hideInSearch: true,
      fieldProps: {
        disabled: false
      },
      formItemProps: {
        rules: [common.ruleUtils.getRule("required")]
      }
    },
    {
      title: "\u901A\u9053\u540D\u79F0",
      dataIndex: "tunnelName",
      hideInSearch: true,
      formItemProps: {
        rules: [common.ruleUtils.getRule("required")]
      }
    },
    {
      title: "\u901A\u9053\u4F59\u989D",
      dataIndex: "balance",
      hideInForm: true,
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u4ECA\u65E5\u4EE3\u6536\u91D1\u989D",
      dataIndex: "usedMoney",
      hideInForm: true,
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u4ECA\u65E5\u4E0A\u6E38\u624B\u7EED\u8D39",
      dataIndex: "upFee",
      hideInForm: true,
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u4ECA\u65E5\u5546\u6237\u624B\u7EED\u8D39",
      dataIndex: "merchantFee",
      hideInForm: true,
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u5355\u7B14\u6700\u5C0F\u9650\u989D",
      dataIndex: "min",
      valueType: "digit",
      fieldProps: {
        precision: 2
      },
      formItemProps: {
        className: "my-form-item",
        rules: [common.ruleUtils.getRule("required")]
      },
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u5355\u7B14\u6700\u5927\u9650\u989D",
      dataIndex: "max",
      valueType: "digit",
      fieldProps: {
        min: 0,
        max: 1e9,
        precision: 2
      },
      formItemProps: {
        className: "my-form-item",
        rules: [common.ruleUtils.getRule("required")]
      },
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u5355\u65E5\u9650\u989D",
      dataIndex: "dailyQuota",
      valueType: "digit",
      fieldProps: {
        min: 0,
        max: 1e9,
        precision: 2
      },
      formItemProps: {
        className: "my-form-item",
        rules: [common.ruleUtils.getRule("required")]
      },
      hideInSearch: true
      // sorter: true,
    },
    {
      title: "\u901A\u9053\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: System.BaseRequestAsync(
        currencyList.filter((item) => item.value !== System.BaseAll.value)
      ),
      formItemProps: {
        rules: [common.ruleUtils.getRule("required")]
      },
      fieldProps: {
        disabled: true
      },
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u63D0\u4EA4\u9891\u7387",
      dataIndex: "submitFrequency",
      valueType: "digit",
      fieldProps: {
        max: 1e9,
        colSpan: 24
      },
      formItemProps: {
        className: "my-form-item"
        // rules: [common.ruleUtils.getRule('required')],
      },
      hideInSearch: true
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      render: (text, record) => common.antdUtils.renderTag(Channel.ChannelStatusList, +record.status),
      hideInForm: true,
      hideInSearch: true
    },
    {
      title: "\u5907\u6CE8",
      dataIndex: "remark",
      valueType: "textarea",
      hideInSearch: true,
      formItemProps: {
        className: "my-form-item"
      },
      width: 150
    },
    {
      title: "\u521B\u5EFA\u65F6\u95F4",
      dataIndex: "createTime",
      valueType: "dateTime",
      hideInSearch: true,
      hideInForm: true,
      width: 140
    },
    {
      title: "\u4FEE\u6539\u65F6\u95F4",
      dataIndex: "updateTime",
      valueType: "dateTime",
      hideInSearch: true,
      hideInForm: true,
      width: 140
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      hideInSearch: true,
      hideInForm: true
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    TablePage,
    {
      moduleTitle: "\u4EE3\u6536\u901A\u9053\u7BA1\u7406",
      moduleName: "\u4EE3\u6536\u901A\u9053",
      editNameKey: "tunnelName",
      columns,
      scroll: { x: 2e3 },
      addRequest: services.channel.addTunnelConfig,
      editRequest: services.channel.editTunnelConfig,
      listRequest: (params) => {
        if (keyword)
          params[keywordType] = keyword;
        return services.channel.getTunnelConfigList({
          ...params,
          type: ChannelTypeEnum.Collect
        });
      },
      onReset: () => {
        setKeyword("");
      },
      beforeRequestFormat: (param) => {
        param.type = ChannelTypeEnum.Collect;
        return pick(param, [
          "type",
          "tunnelName",
          "tunnelId",
          "min",
          "max",
          "dailyQuota",
          "submitFrequency",
          "remark"
        ]);
      },
      rowKey: "tunnelId",
      actionsWidth: 240,
      tableRef: tablePageRef,
      toolBarActions: () => {
        return [
          /* @__PURE__ */ React.createElement(BalanceRecordModal, { key: "balance", type: ChannelTypeEnum.Collect })
        ];
      },
      actions: (record) => {
        const isDisabled = +record.status === 2;
        const statusLabel = isDisabled ? "\u542F\u7528" : "\u7981\u7528";
        return common.antdUtils.renderTableAction([
          {
            label: statusLabel,
            className: isDisabled ? "text-green" : "text-red",
            auth: "true",
            onClick: () => handleUpdateStatus(record, statusLabel)
          },
          {
            label: "\u4FEE\u6539\u4F59\u989D",
            auth: "true",
            onClick: () => {
              setCurrent(record);
              setUpdateBalanceVisible(true);
            }
          },
          {
            label: "\u5206\u914D",
            auth: "true",
            onClick: () => {
              setCurrent(record);
              setTunnelDistributeVisible(true);
            }
          }
        ]);
      }
    }
  ), /* @__PURE__ */ React.createElement(
    UpdateBalanceModal,
    {
      visible: updateBalanceVisible,
      setVisible: setUpdateBalanceVisible,
      current,
      refresh
    }
  ), /* @__PURE__ */ React.createElement(
    TunnelDistributeModal,
    {
      visible: tunnelDistributeVisible,
      setVisible: setTunnelDistributeVisible,
      current,
      refresh
    }
  ));
};
