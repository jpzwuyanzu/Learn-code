import {
  ModalForm,
  ProForm,
  ProFormDigit,
  ProFormItem
} from "@ant-design/pro-components";
import { useEffect, useRef, useState } from "react";
import services from "@/services";
import { BaseModalConfig, System } from "@/constants";
import common from "@/utils/common";
import { ChannelTypeEnum } from "@/enums";
import { useModel } from "umi";
import { message } from "antd";
import CheckboxGroup from "@/components/CheckboxGroup";
export default (props) => {
  const { visible, setVisible, current, refresh } = props;
  const { merchantList } = useModel("global");
  const merchantItems = merchantList.filter(
    (item) => item.value !== System.BaseAll.value
  );
  const [prevMerchantIds, setPrevMerchantIds] = useState([]);
  useEffect(() => {
    if (visible) {
      setPrevMerchantIds(current?.merchantIds || []);
    } else {
      setPrevMerchantIds([]);
    }
  }, [visible]);
  const formRef = useRef();
  const initialValues = {
    merchantIds: current.merchantIds ?? [],
    upRate: current.upRate ?? 0,
    merchantRate: current.merchantRate ?? 0,
    upSingleOrderFee: current.upSingleOrderFee ?? 0,
    merchantSingleOrderFee: current.merchantSingleOrderFee ?? 0
  };
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: `\u901A\u9053\u5206\u914D(${current.tunnelName})`,
      formRef,
      open: visible,
      autoFocusFirstInput: true,
      grid: true,
      modalProps: {
        ...BaseModalConfig,
        onCancel: () => setVisible(false)
      },
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 600,
      onFinish: async (values) => {
        values.tunnelId = current.tunnelId;
        values.type = ChannelTypeEnum.Payment;
        values.cancelMerchantIds = prevMerchantIds.filter((item) => {
          return !values.merchantIds.includes(item);
        });
        await services.channel.updateTunnelDistribute(values);
        message.success("\u64CD\u4F5C\u6210\u529F");
        setVisible(false);
        refresh && refresh();
        return true;
      },
      initialValues
    },
    /* @__PURE__ */ React.createElement("div", { style: { padding: "10px 0" } }, "\u901A\u9053\u9ED8\u8BA4\u8D39\u7387\u914D\u7F6E"),
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        name: "upRate",
        label: "\u4E0A\u6E38\u8D39\u7387\uFF08%\uFF09",
        colProps: { span: 12 },
        min: 0,
        fieldProps: { precision: 2 },
        max: 100,
        placeholder: "\u4E0A\u6E38\u9ED8\u8BA4\u8D39\u7387",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u4E0A\u6E38\u8D39\u7387")]
      }
    ), /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        name: "upSingleOrderFee",
        label: "\u4E0A\u6E38\u5355\u7B14\u624B\u7EED\u8D39",
        colProps: { span: 12 },
        min: 0,
        fieldProps: { precision: 2 },
        placeholder: "\u4E0A\u6E38\u5355\u7B14\u624B\u7EED\u8D39",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u4E0A\u6E38\u5355\u7B14\u624B\u7EED\u8D39")]
      }
    )),
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        name: "merchantSingleOrderFee",
        label: "\u5546\u6237\u5355\u7B14\u624B\u7EED\u8D39",
        min: 0,
        colProps: { span: 24 },
        fieldProps: { precision: 2 },
        placeholder: "\u5546\u6237\u5355\u7B14\u624B\u7EED\u8D39",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5546\u6237\u5355\u7B14\u624B\u7EED\u8D39")]
      }
    )),
    /* @__PURE__ */ React.createElement(
      ProFormItem,
      {
        name: "merchantIds",
        label: "\u5206\u914D\u5546\u6237",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u9009\u62E9\u5206\u914D\u5546\u6237")]
      },
      /* @__PURE__ */ React.createElement(CheckboxGroup, { options: merchantItems })
    )
  );
};
