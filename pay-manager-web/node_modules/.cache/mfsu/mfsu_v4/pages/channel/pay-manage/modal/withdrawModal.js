import {
  ModalForm,
  ProFormText,
  ProFormDependency,
  ProFormDigit,
  ProFormSelect
} from "@ant-design/pro-components";
import { useRef } from "react";
import services from "@/services";
import { BaseModalConfig } from "@/constants";
import common from "@/utils/common";
import { message } from "antd";
import _ from "lodash";
const WithdrawTypeOptions = [
  { label: "\u94F6\u884C\u5361", value: 0 },
  { label: "UPI", value: 1 }
];
export default (props) => {
  const { visible, setVisible, current, refresh } = props;
  const formRef = useRef();
  const initialValues = {
    currency: current.currency,
    // tunnelId: current.tunnelId,
    originBalance: current.balance ?? 0
  };
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: "\u53D1\u8D77\u901A\u9053\u63D0\u73B0",
      formRef,
      open: visible,
      autoFocusFirstInput: true,
      grid: true,
      modalProps: {
        ...BaseModalConfig,
        onCancel: () => setVisible(false)
      },
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 600,
      onFinish: async (values) => {
        const data = await services.channel.getTunnelBalance(current.tunnelId);
        if (_.isNumber(data?.balance)) {
          formRef.current.setFieldValue("originBalance", data?.balance);
          if (Number(values.withdrawAmount) > data?.balance) {
            message.error("\u63D0\u73B0\u91D1\u989D\u8D85\u8FC7\u901A\u9053\u4F59\u989D\uFF01");
            return false;
          }
        }
        const params = {
          ..._.omit(values, "currency"),
          tunnelId: current.tunnelId
        };
        await services.channel.withdraw(params);
        message.success("\u64CD\u4F5C\u6210\u529F");
        setVisible(false);
        refresh && refresh();
        return true;
      },
      initialValues
    },
    /* @__PURE__ */ React.createElement(ProFormText, { name: "currency", label: "\u5E01\u79CD", disabled: true }),
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "originBalance",
        label: "\u901A\u9053\u4F59\u989D",
        placeholder: "",
        disabled: true
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        name: "withdrawAmount",
        label: "\u63D0\u73B0\u91D1\u989D",
        placeholder: `\u8BF7\u8F93\u5165\u63D0\u73B0\u91D1\u989D\uFF0C\u6700\u4F4E${current.min}\uFF0C\u6700\u9AD8${current.max}`,
        min: current.min,
        max: current.max,
        fieldProps: { precision: 2 },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u63D0\u73B0\u91D1\u989D")
          // common.ruleUtils.getRule('validator', '', {
          //   validator: (rule, value, callback) => {
          //     if (![null, undefined, ''].includes(value) && +value === 0) {
          //       return callback('请输入不为0的数字');
          //     }
          //     return callback();
          //   },
          // }),
        ]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormSelect,
      {
        name: "withdrawType",
        label: "\u63D0\u73B0\u65B9\u5F0F",
        initialValue: 0,
        options: WithdrawTypeOptions,
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u9009\u62E9\u63D0\u73B0\u65B9\u5F0F")]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "payeeName",
        label: "\u6536\u6B3E\u4EBA\u59D3\u540D",
        placeholder: "\u8BF7\u8F93\u5165\u6536\u6B3E\u4EBA\u59D3\u540D",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u6536\u6B3E\u4EBA\u59D3\u540D")]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "payeeAccount",
        label: "\u6536\u6B3E\u4EBA\u8D26\u53F7",
        placeholder: "\u8BF7\u8F93\u5165\u6536\u6B3E\u4EBA\u8D26\u53F7",
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u6536\u6B3E\u4EBA\u8D26\u53F7")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormDependency, { name: ["withdrawType"] }, ({ withdrawType }) => {
      return withdrawType === 0 ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
        ProFormText,
        {
          name: "ifsc",
          label: "IFSC",
          placeholder: "\u8BF7\u8F93\u5165IFSC",
          rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165IFSC")]
        }
      ), /* @__PURE__ */ React.createElement(
        ProFormText,
        {
          name: "phone",
          label: "\u624B\u673A\u53F7\u7801",
          placeholder: "\u8BF7\u8F93\u5165\u624B\u673A\u53F7\u7801"
        }
      )) : null;
    })
  );
};
