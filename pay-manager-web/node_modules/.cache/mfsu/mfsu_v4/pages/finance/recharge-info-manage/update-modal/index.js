import services from "@/services";
import {
  Button,
  Modal,
  message
} from "antd";
import { useEffect, useRef, useState } from "react";
import common from "@/utils/common";
import {
  ProForm,
  ProFormDigit,
  ProFormDigitRange,
  ProFormList,
  ProFormRadio,
  ProFormText,
  ProFormDependency
} from "@ant-design/pro-components";
import { PlusOutlined } from "@ant-design/icons";
export default (props) => {
  const formRef = useRef();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const { record, type } = props;
  const label = type === "edit" ? "\u7F16\u8F91USDT\u5145\u503C\u914D\u7F6E" : "\u6DFB\u52A0USDT\u5145\u503C\u914D\u7F6E";
  const msg = type === "edit" ? "\u7F16\u8F91\u6210\u529F" : "\u6DFB\u52A0\u6210\u529F";
  useEffect(() => {
    if (isModalOpen && type === "edit" && record) {
      const formData = { ...record };
      formData.content = JSON.parse(formData.content || "[]");
      formRef.current.setFieldsValue({
        ...formData,
        recharge: [formData.minRecharge, formData.maxRecharge]
      });
    }
  }, [isModalOpen]);
  const submit = async (formData) => {
    try {
      setLoading(true);
      formData.content = JSON.stringify(formData.content);
      if (type === "edit") {
        formData.id = record?.id;
      }
      await services.finance.rechargeInfoManage[type](formData);
      message.success(msg);
      setIsModalOpen(false);
      props?.reload();
    } finally {
      setLoading(false);
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, type === "edit" ? /* @__PURE__ */ React.createElement("a", { onClick: () => setIsModalOpen(true) }, "\u7F16\u8F91") : /* @__PURE__ */ React.createElement(
    Button,
    {
      type: "primary",
      icon: /* @__PURE__ */ React.createElement(PlusOutlined, null),
      onClick: () => setIsModalOpen(true)
    },
    "\u6DFB\u52A0"
  ), /* @__PURE__ */ React.createElement(
    Modal,
    {
      title: label,
      open: isModalOpen,
      width: 800,
      onCancel: () => {
        setIsModalOpen(false);
      },
      onOk: () => {
        formRef.current.submit();
      },
      confirmLoading: loading
    },
    /* @__PURE__ */ React.createElement(ProForm, { submitter: false, formRef, onFinish: submit }, /* @__PURE__ */ React.createElement(
      ProFormRadio.Group,
      {
        options: [
          { label: "USDT\u4FE1\u606F", value: 1 }
          // { label: '链接', value: 2, disabled: true },
        ],
        label: "\u8DF3\u8F6C\u65B9\u5F0F",
        name: "jumpType",
        rules: [common.ruleUtils.getRule("required")],
        initialValue: 1
      }
    ), /* @__PURE__ */ React.createElement(
      ProFormDigitRange,
      {
        placeholder: ["\u6700\u4F4E\u989D\u5EA6", "\u6700\u9AD8\u989D\u5EA6"],
        fieldProps: { min: 0 },
        label: "\u5145\u503CU\u989D\u5EA6",
        name: "recharge",
        transform: (value) => {
          return {
            minRecharge: value[0],
            maxRecharge: value[1]
          };
        },
        rules: [common.ruleUtils.getRule("digitRange")]
      }
    ), /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "\u6E29\u99A8\u63D0\u793A",
        name: "kindTips",
        placeholder: "\u8BF7\u8F93\u5165\u6E29\u99A8\u63D0\u793A"
      }
    ), /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "\u6559\u7A0B\u94FE\u63A5",
        name: "tutorialUrl",
        placeholder: "\u8BF7\u8F93\u5165\u6559\u7A0B\u94FE\u63A5"
      }
    ), /* @__PURE__ */ React.createElement(ProFormDependency, { name: ["jumpType"] }, ({ jumpType }) => {
      if (+jumpType === 2) {
        return /* @__PURE__ */ React.createElement(
          ProFormText,
          {
            label: "\u8DF3\u8F6C\u94FE\u63A5",
            name: "jumpUrl",
            placeholder: "\u8BF7\u8F93\u5165\u8DF3\u8F6C\u94FE\u63A5",
            rules: [
              common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u8DF3\u8F6C\u94FE\u63A5")
            ]
          }
        );
      }
      return /* @__PURE__ */ React.createElement(
        ProFormList,
        {
          name: "content",
          label: "USDT\u4FE1\u606F",
          creatorButtonProps: { creatorButtonText: "\u65B0\u589EUSDT\u914D\u7F6E" },
          rules: [
            common.ruleUtils.getRule("required", "USDT\u914D\u7F6E\u4E0D\u80FD\u4E3A\u7A7A")
          ]
        },
        /* @__PURE__ */ React.createElement("div", { className: "fields-item" }, /* @__PURE__ */ React.createElement(
          ProFormText,
          {
            name: "address",
            placeholder: "\u6536\u6B3EUSDT\u5730\u5740",
            rules: [
              common.ruleUtils.getRule(
                "required",
                "\u8BF7\u8F93\u5165\u6536\u6B3EUSDT\u5730\u5740"
              )
            ]
          }
        ), /* @__PURE__ */ React.createElement(
          ProFormDigit,
          {
            name: "exchangeNum",
            placeholder: "\u6BCF\u65E5\u9650\u989D\u63D0\u9192\u91D1\u989D",
            rules: [
              common.ruleUtils.getRule(
                "required",
                "\u8BF7\u8F93\u5165\u6BCF\u65E5\u9650\u989D\u63D0\u9192\u91D1\u989D"
              )
            ]
          }
        ), /* @__PURE__ */ React.createElement(
          ProFormDigit,
          {
            name: "showRate",
            placeholder: "\u8BF7\u8F93\u5165\u5C55\u793A\u6982\u7387",
            rules: [
              common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5C55\u793A\u6982\u7387"),
              {
                validator: (_, value, callback) => {
                  const formData = formRef?.current?.getFieldsValue();
                  const showRateSum = formData?.content.reduce(
                    (prev = 0, cur) => prev + cur?.showRate,
                    0
                  );
                  if (showRateSum > 100) {
                    callback("\u5408\u8BA1\u5C55\u793A\u6982\u7387\u4E0D\u80FD\u8D85\u8FC7100%");
                  }
                  callback();
                }
              }
            ],
            fieldProps: {
              addonAfter: "%"
            },
            min: 0,
            max: 100
          }
        ))
      );
    }))
  ));
};
