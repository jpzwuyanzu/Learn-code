import { TablePage } from "@/components";
import services from "@/services";
import { Tag } from "antd";
import { WithdrawExchangeTypeOptions } from "@/constants";
import MerchantConfiguration from "../components/merchant-configuration";
import CurrencyConfiguration from "../components/currency-configuration";
import CurrencyRateConfiguration from "@/pages/finance/components/currency-rate-configuration";
import { useRef } from "react";
import AmountConfiguration from "@/pages/finance/withdraw-info-manage/amount-configuration";
import WithdrawConfiguration from "@/pages/finance/withdraw-info-manage/withdraw-configuration";
import { ProFormRadio } from "@ant-design/pro-components";
import common from "@/utils/common";
import { useModel } from "@@/exports";
export default () => {
  const tableRef = useRef();
  const { getCurrencyOptionItems } = useModel("global");
  const listRequest = async (params) => {
    const data = await services.finance.withdrawInfoManage.list(params);
    data.forEach((item) => {
      item.amountRange = [item.minAmountOne, item.maxAmountOne];
    });
    return {
      success: true,
      data
    };
  };
  const editRequest = async (params) => {
    delete params.amountRange;
    return services.finance.withdrawInfoManage.edit(params);
  };
  const addRequest = async (params) => {
    delete params.amountRange;
    return services.finance.withdrawInfoManage.add(params);
  };
  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u63D0\u73B0\u65B9\u5F0F",
      dataIndex: "withdrawType",
      valueType: "select",
      request: async () => WithdrawExchangeTypeOptions,
      hideInForm: true
    },
    {
      title: "\u5355\u65E5\u6700\u5927\u63D0\u73B0\u91D1\u989D",
      dataIndex: "maxAmountDay",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5355\u7B14\u63D0\u73B0\u6700\u5C0F\u989D\u5EA6",
      dataIndex: "minAmountOne",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5355\u7B14\u63D0\u73B0\u6700\u5927\u989D\u5EA6",
      dataIndex: "maxAmountOne",
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5F53\u65E5\u63D0\u73B0\u6700\u5927U\u91D1\u989D",
      dataIndex: "maxAmountDay",
      valueType: "digit",
      hideInSearch: true,
      hideInTable: true,
      fieldProps: {
        style: { width: 220 }
      },
      formItemProps: {
        rules: [common.ruleUtils.getRule("required")]
      }
    },
    {
      title: "\u5355\u7B14\u63D0\u73B0\u91D1\u989DU\u8303\u56F4",
      dataIndex: "amountRange",
      valueType: "digitRange",
      fieldProps: {
        placeholder: ["\u6700\u5C0F\u91D1\u989D", "\u6700\u5927\u91D1\u989D"]
      },
      formItemProps: {
        rules: [common.ruleUtils.getRule("digitRange")]
      },
      hideInSearch: true,
      hideInTable: true,
      transform: (value) => {
        return {
          minAmountOne: value[0],
          maxAmountOne: value[1]
        };
      }
    },
    {
      title: "\u63D0\u73B0\u624B\u7EED\u8D39",
      dataIndex: "handlingFee",
      valueType: "digit",
      fieldProps: {
        addonAfter: "%",
        style: { width: 160 },
        max: 100
      },
      formItemProps: {
        rules: [common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u63D0\u73B0\u624B\u7EED\u8D39")]
      },
      render: (text, record) => record?.handlingFee + "%",
      hideInSearch: true
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      request: async () => [
        { label: "\u5F00\u542F", value: 1 },
        { label: "\u5173\u95ED", value: 2 }
      ],
      render: (dom, record) => /* @__PURE__ */ React.createElement(Tag, { color: record?.status === 1 ? "green" : "red" }, dom),
      fieldProps: {
        allowClear: true,
        placeholder: "\u8BF7\u9009\u62E9\u72B6\u6001"
      },
      formItemProps: {
        rules: [{ required: true, message: "\u8BF7\u9009\u62E9\u72B6\u6001" }]
      },
      order: 9,
      hideInForm: true
    },
    {
      title: "\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      initialValue: 1,
      renderFormItem: (item, { defaultRender, ...rest }, form) => {
        return /* @__PURE__ */ React.createElement(
          ProFormRadio.Group,
          {
            ...rest,
            options: [
              { label: "\u5F00\u542F", value: 1 },
              { label: "\u5173\u95ED", value: 2 }
            ]
          }
        );
      },
      formItemProps: {
        style: { marginBottom: 0 },
        rules: [{ required: true, message: "\u8BF7\u9009\u62E9\u72B6\u6001" }]
      },
      hideInTable: true,
      hideInSearch: true,
      order: 9
    },
    {
      title: "\u66F4\u65B0\u65F6\u95F4",
      dataIndex: "updateTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"]
      },
      render: (text, record) => record?.updateTime,
      hideInSearch: true,
      hideInForm: true
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: () => getCurrencyOptionItems(null),
      fieldProps: {
        allowClear: true
      },
      hideInForm: true,
      hideInTable: true
    },
    {
      title: "\u5546\u6237ID",
      dataIndex: "merchantId",
      hideInTable: true,
      hideInForm: true
    }
  ];
  return /* @__PURE__ */ React.createElement(
    TablePage,
    {
      moduleName: "USDT\u63D0\u73B0\u914D\u7F6E",
      tableRef,
      columns,
      listRequest,
      editRequest,
      addRequest,
      changeStatusMap: { 1: "\u5F00\u542F", 2: "\u5173\u95ED" },
      formWidth: 500,
      actions: (record) => [
        /* @__PURE__ */ React.createElement(
          MerchantConfiguration,
          {
            key: "merchant-configuration",
            record,
            request: services.finance.withdrawInfoManage.updateMerchant,
            reload: tableRef?.current?.reload
          }
        ),
        /* @__PURE__ */ React.createElement(
          CurrencyConfiguration,
          {
            key: "currency-configuration",
            record,
            request: services.finance.withdrawInfoManage.updateCurrency,
            reload: tableRef?.current?.reload
          }
        ),
        /* @__PURE__ */ React.createElement(
          CurrencyRateConfiguration,
          {
            triggerType: "link",
            rateType: 2,
            configId: record.id,
            key: "currency-factor-configuration"
          }
        )
      ],
      toolBarActions: (record) => [
        /* @__PURE__ */ React.createElement(AmountConfiguration, { key: "amount-configuration" }),
        /* @__PURE__ */ React.createElement(WithdrawConfiguration, { key: "withdraw-configuration" }),
        /* @__PURE__ */ React.createElement(
          CurrencyRateConfiguration,
          {
            rateType: 2,
            key: "currency-factor-configuration"
          }
        )
      ]
    }
  );
};
