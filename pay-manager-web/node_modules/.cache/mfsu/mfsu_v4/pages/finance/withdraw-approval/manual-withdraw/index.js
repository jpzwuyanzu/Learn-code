import services from "@/services";
import { Button, message } from "antd";
import { useRef, useState } from "react";
import common from "@/utils/common";
import { useModel } from "@@/exports";
import {
  ModalForm,
  ProFormDigit,
  ProFormField,
  ProFormSelect,
  ProFormText
} from "@ant-design/pro-components";
import usdt from "@/assets/usdt.png";
import "./index.less";
import { APP_IS_PAYMENT } from "@/constants";
import { useAsyncEffect } from "ahooks";
import _ from "lodash";
export default (props) => {
  const formRef = useRef();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { getCurrencyOptionItems } = useModel("global");
  const { merchantInfo } = useModel("merchant");
  const [amount, setAmount] = useState(0);
  const [currencyItems, setCurrencyItems] = useState([]);
  const [currency, setCurrency] = useState("");
  const [currencyRateItemMap, setCurrencyRateItemMap] = useState([]);
  const [currencyRate, setCurrencyRate] = useState(0);
  const [USDTAddress, setUSDTAddress] = useState("");
  const [withdrawConfig, setWithdrawConfig] = useState({
    dayWithdrawCount: 0,
    minAmountOne: 0,
    maxAmountOne: 0
  });
  const [availableBalance, setAvailableBalance] = useState(0);
  const [conversionFee, setConversionFee] = useState(0);
  const [balance, setBalance] = useState(0);
  const [balanceMap, setBalanceMap] = useState({});
  useAsyncEffect(async () => {
    if (isModalOpen) {
      const data = await services.finance.withdrawInfoManage.listCurrencyRate({
        rateType: 2
      });
      const _currencyRateItemMap = {};
      data.forEach((item) => {
        _currencyRateItemMap[item.currency] = item;
      });
      setCurrencyRateItemMap(_currencyRateItemMap);
      const result = await services.finance.withdrawInfoManage.getStrategy();
      const withdrawConfigItems = await services.finance.withdrawInfoManage.list({});
      const withdrawTypeConfig = withdrawConfigItems?.[0];
      setWithdrawConfig({
        ...result,
        ...withdrawTypeConfig
      });
      const _balanceMap = await services.finance.withdrawInfoManage.getBalanceMap({
        id: merchantInfo?.merchantId
      });
      setBalanceMap(_balanceMap);
      const withdrawTypeCurrency = withdrawTypeConfig.currency.split(",");
      const currencyOptions = await getCurrencyOptionItems(null);
      const filterItems = currencyOptions.filter((item) => {
        return withdrawTypeConfig.currency.split(",").includes(item.value);
      });
      const currency2 = filterItems[0]?.value;
      setCurrency(currency2);
      formRef.current?.setFieldsValue({
        currency: currency2
      });
      const _currencyRate = _currencyRateItemMap[currency2]?.currencyRate;
      const _conversionFee = _.ceil(
        (1 + (withdrawConfig?.handlingFee || 0) / 100) * _currencyRate || 0,
        2
      );
      setConversionFee(_conversionFee);
      setCurrencyItems(filterItems);
      setAvailableBalance(
        _.ceil(balanceMap?.[currency2]?.availableBalance || 0, 2)
      );
    }
  }, [isModalOpen]);
  const getUSDTAddress = async () => {
    const merchantData = await services.accountInfo.getAccountInfo();
    setUSDTAddress(merchantData?.usdt);
  };
  useAsyncEffect(async () => {
    await getUSDTAddress();
  }, []);
  useAsyncEffect(async () => {
    if (currency) {
      setAvailableBalance(
        _.ceil(balanceMap?.[currency]?.availableBalance || 0, 2)
      );
      const _currencyRate = currencyRateItemMap[currency]?.currencyRate;
      setCurrencyRate(_currencyRate);
      setConversionFee(
        _.ceil(
          (1 + (withdrawConfig?.handlingFee || 0) / 100) * _currencyRate || 0,
          2
        )
      );
    }
  }, [currency]);
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      className: "manual-withdraw-modal",
      layout: "horizontal",
      labelCol: { span: 6 },
      formRef,
      title: "\u53D1\u8D77\u63D0\u73B0",
      open: isModalOpen,
      onOpenChange: (open) => {
        if (open) {
          setIsModalOpen(true);
        }
      },
      width: 700,
      trigger: props?.children || /* @__PURE__ */ React.createElement(Button, { type: "primary", onClick: () => setIsModalOpen(true) }, "\u53D1\u8D77\u63D0\u73B0"),
      onFinish: async (formData) => {
        formData.merchantId = merchantInfo.merchantId;
        await services.finance.withdrawApproval.withdraw(formData);
        message.success("\u64CD\u4F5C\u6210\u529F");
        setIsModalOpen(false);
        if (props?.reload) {
          props.reload();
        }
      },
      modalProps: {
        onCancel: () => {
          setIsModalOpen(false);
          formRef.current?.resetFields();
          setBalance(0);
        },
        okText: APP_IS_PAYMENT ? "\u786E\u5B9A" : "\u63D0\u4EA4\u8BA2\u5355"
      },
      onValuesChange: (values) => {
        if (values.amount)
          setAmount(values.amount);
        if (values.currency)
          setCurrency(values.currency);
      }
    },
    /* @__PURE__ */ React.createElement(
      ProFormSelect,
      {
        label: "\u5E01\u79CD",
        name: "currency",
        options: currencyItems,
        rules: [common.ruleUtils.getRule("required")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormField, { label: "\u53EF\u7528\u4F59\u989D" }, /* @__PURE__ */ React.createElement("span", null, availableBalance)),
    /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        label: "\u63D0\u73B0\u91D1\u989D",
        name: "amount",
        min: _.ceil(withdrawConfig?.minAmountOne * conversionFee),
        max: _.ceil(withdrawConfig?.maxAmountOne * conversionFee),
        placeholder: `\u8F93\u5165\u63D0\u73B0\u91D1\u989D\uFF0C\u6700\u4F4E ${_.ceil(
          withdrawConfig?.minAmountOne * conversionFee
        )}\uFF0C\u6700\u9AD8 ${_.ceil(withdrawConfig?.maxAmountOne * conversionFee)}`,
        rules: [common.ruleUtils.getRule("required")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormField, { label: "\u9884\u8BA1\u5230\u8D26\u7684USDT\u91D1\u989D" }, /* @__PURE__ */ React.createElement("div", { className: "usd-computed" }, /* @__PURE__ */ React.createElement("span", { className: "border" }, amount || 0), /* @__PURE__ */ React.createElement("span", null, "\xF7"), /* @__PURE__ */ React.createElement("span", { className: "border" }, /* @__PURE__ */ React.createElement("span", null, conversionFee)), /* @__PURE__ */ React.createElement("span", null, "="), /* @__PURE__ */ React.createElement("span", { className: "border" }, /* @__PURE__ */ React.createElement("img", { src: usdt, alt: "usdt" }), amount && currencyRate ? (amount / conversionFee).toFixed(2) : 0))),
    /* @__PURE__ */ React.createElement(ProFormField, { label: "\u60A8\u7684\u6536\u6B3EUSDT\u5730\u5740" }, /* @__PURE__ */ React.createElement("span", null, USDTAddress || "\u672A\u8BBE\u7F6E")),
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "\u8C37\u6B4C\u9A8C\u8BC1\u7801",
        name: "gaCode",
        rules: [common.ruleUtils.getRule("required")]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "\u652F\u4ED8\u5BC6\u7801",
        name: "payPassword",
        rules: [common.ruleUtils.getRule("required")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormField, null, /* @__PURE__ */ React.createElement("div", { className: "tips" }, /* @__PURE__ */ React.createElement("div", { className: "text-red" }, /* @__PURE__ */ React.createElement("p", null, "\u63D0\u73B0\u6B65\u9AA4\uFF1A"), /* @__PURE__ */ React.createElement("p", null, "1\u3001\u63D0\u4EA4\u63D0\u73B0\u8BA2\u5355"), /* @__PURE__ */ React.createElement("p", null, "2\u3001\u7B49\u5F85\u8D22\u52A1\u5904\u7406"), /* @__PURE__ */ React.createElement("p", null, "3\u3001\u5982\u6709\u7591\u95EE\uFF0C\u8BF7\u8054\u7CFB\u5546\u52A1")), /* @__PURE__ */ React.createElement("div", { className: "text-red" }, /* @__PURE__ */ React.createElement("p", null, "\u63D0\u73B0\u9700\u77E5\uFF1A"), /* @__PURE__ */ React.createElement("p", null, "1\u3001\u5355\u7B14\u63D0\u73B0USDT\u989D\u5EA6\uFF1A", withdrawConfig?.minAmountOne, "-", withdrawConfig?.maxAmountOne), /* @__PURE__ */ React.createElement("p", null, "2\u3001\u6BCF\u65E5\u63D0\u73B0\u6B21\u6570\uFF1A", withdrawConfig?.dayWithdrawCount || "-"), /* @__PURE__ */ React.createElement("p", null, "3\u3001\u5982\u6709\u7591\u95EE\uFF0C\u8BF7\u8054\u7CFB\u5546\u52A1"))))
  );
};
