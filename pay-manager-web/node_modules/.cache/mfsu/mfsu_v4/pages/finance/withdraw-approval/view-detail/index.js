import services from "@/services";
import { Button, Modal, Input, Select, message } from "antd";
import { useState } from "react";
import { useModel } from "@@/exports";
import { WithdrawExchangeTypeOptions } from "@/constants";
import { ProDescriptions } from "@ant-design/pro-components";
import "./index.less";
export default (props) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { record } = props;
  const {
    getMerchantOptionItems,
    getCurrencyOptionItems,
    getFirstCurrencyOption
  } = useModel("global");
  const [exchangeType, setExchangeType] = useState(record?.exchangeType);
  const [remark, setRemark] = useState("");
  const [loading, setLoading] = useState(false);
  const isPendingPayment = record?.auditStatus === 0;
  const exchangeTypeText = WithdrawExchangeTypeOptions.find(
    (item) => item.value === record?.exchangeType
  )?.label;
  const columns = [
    {
      title: "\u5546\u6237ID",
      dataIndex: "merchantId"
    },
    {
      title: "\u63D0\u73B0\u91D1\u989D",
      dataIndex: "amount",
      render: (dom) => /* @__PURE__ */ React.createElement("span", { className: "text-red" }, dom)
    },
    {
      title: "\u5546\u6237\u540D\u79F0",
      dataIndex: "merchantName"
    },
    {
      title: "\u9700\u6253\u6B3E",
      dataIndex: "realAmount",
      render: (dom) => /* @__PURE__ */ React.createElement("span", { className: "text-red" }, dom)
    },
    {
      title: "\u7533\u8BF7\u65F6\u95F4",
      dataIndex: "createTime",
      span: 2
    },
    {
      title: "",
      dataIndex: "action",
      span: 2,
      render: (dom, record2) => {
        return /* @__PURE__ */ React.createElement("table", { className: "descriptions-table" }, /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("th", null, "\u63D0\u73B0\u7C7B\u578B"), /* @__PURE__ */ React.createElement("th", null, isPendingPayment ? "USDT\u5730\u5740" : "\u63D0\u73B0\u8D26\u6237"), /* @__PURE__ */ React.createElement("th", null, "\u6362\u7B97\u7CFB\u6570"), /* @__PURE__ */ React.createElement("th", null, "\u9700\u6253\u6B3EUSDT\u91D1\u989D")), /* @__PURE__ */ React.createElement("tr", null, /* @__PURE__ */ React.createElement("td", null, exchangeTypeText), /* @__PURE__ */ React.createElement("td", null, record2.receiptsAddress), /* @__PURE__ */ React.createElement("td", { className: "text-red" }, record2.exchangeRate), /* @__PURE__ */ React.createElement("td", { className: "text-red" }, record2.amountUSDT)));
      }
    },
    {
      title: "\u6253\u6B3E\u65B9\u5F0F",
      dataIndex: "exchangeType",
      valueType: "select",
      span: 2,
      render: (dom) => {
        return isPendingPayment ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
          Select,
          {
            options: WithdrawExchangeTypeOptions,
            style: { width: "100%" },
            placeholder: "\u8BF7\u9009\u62E9\u6253\u6B3E\u65B9\u5F0F",
            defaultValue: record?.exchangeType,
            onChange: setExchangeType
          }
        )) : /* @__PURE__ */ React.createElement("span", null, exchangeTypeText);
      }
    },
    {
      title: "\u64CD\u4F5C\u5907\u6CE8",
      dataIndex: "remark",
      span: 2,
      render: (dom) => {
        return isPendingPayment ? /* @__PURE__ */ React.createElement(
          Input,
          {
            placeholder: "\u8BF7\u8F93\u5165\u5907\u6CE8\uFF0C\u9000\u56DE\u3001\u9700\u586B\u5199\u5907\u6CE8\uFF08\u7ED9\u5BA2\u6237\u770B\uFF09",
            onChange: (e) => setRemark(e.target.value)
          }
        ) : dom || "-";
      }
    }
  ];
  const label = isPendingPayment ? "\u5F85\u6253\u6B3E" : "\u67E5\u770B";
  const labelColor = isPendingPayment ? "text-orange" : "text-green";
  const modalTitle = isPendingPayment ? "\u63D0\u73B0\u5BA1\u6279\u6253\u6B3E" : "\u63D0\u73B0\u4FE1\u606F\u5BA1\u6279\u8BE6\u60C5";
  const submit = async (auditStatus) => {
    try {
      setLoading(true);
      await services.finance.withdrawApproval.pendingPay({
        id: +record.id,
        auditStatus,
        transferType: exchangeType,
        remark
      });
      message.success("\u64CD\u4F5C\u6210\u529F");
      setIsModalOpen(false);
      props?.reload();
    } finally {
      setLoading(false);
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("a", { className: labelColor, onClick: () => setIsModalOpen(true) }, label), /* @__PURE__ */ React.createElement(
    Modal,
    {
      title: modalTitle,
      open: isModalOpen,
      footer: null,
      width: 800,
      onCancel: () => {
        setIsModalOpen(false);
      }
    },
    /* @__PURE__ */ React.createElement("div", { className: "withdraw-approval-detail-modal" }, /* @__PURE__ */ React.createElement(
      ProDescriptions,
      {
        request: async () => {
          return {
            success: true,
            data: record
          };
        },
        column: 2,
        columns
      }
    ), isPendingPayment && /* @__PURE__ */ React.createElement("div", { className: "actions" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        loading,
        danger: true,
        type: "primary",
        onClick: () => submit(4)
      },
      "\u9000\u56DE"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        loading,
        danger: true,
        type: "primary",
        onClick: () => submit(2)
      },
      "\u6253\u6B3E"
    )))
  ));
};
