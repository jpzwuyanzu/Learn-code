import { TablePage } from "@/components";
import services from "@/services";
import { useModel } from "@@/exports";
import { Statistic, Tag } from "antd";
import { useEffect, useRef, useState } from "react";
import {
  APP_IS_PAYMENT,
  WithdrawAuditStatusOptions,
  WithdrawExchangeTypeOptions
} from "@/constants";
import ViewDetail from "@/pages/finance/withdraw-approval/view-detail";
import ChangeStatus from "@/pages/finance/withdraw-approval/change-status";
import ManualWithdraw from "@/pages/finance/withdraw-approval/manual-withdraw";
import { useSearchParams } from "umi";
import common from "@/utils/common";
export default () => {
  const tableRef = useRef();
  const searchFormRef = useRef();
  const { getCurrencyOptionItems } = useModel("global");
  const [searchParams, setSearchParams] = useSearchParams();
  const [statisticData, setStatisticData] = useState({
    handlingFee: "",
    payedAmount: "",
    payedNum: "",
    payingAmount: "",
    payingNum: "",
    pendingAmount: "",
    pendingNum: "",
    realAmount: "",
    refundAmount: "",
    refundNum: ""
  });
  const listRequest = async (params) => {
    const { records, total, data } = await services.finance.withdrawApproval.list(params);
    setStatisticData(data);
    return {
      success: true,
      data: records,
      total
    };
  };
  useEffect(() => {
    searchFormRef.current?.setFieldsValue({
      orderNumber: searchParams.get("orderNumber")
    });
    searchFormRef.current?.submit();
  }, [location.search]);
  const columns = [
    {
      title: "\u63D0\u73B0\u8BA2\u5355\u53F7",
      dataIndex: "orderNumber",
      width: 200,
      copyable: true,
      initialValue: searchParams.get("orderNumber")
    },
    {
      title: "\u5546\u6237ID",
      dataIndex: "merchantId",
      hideInSearch: !APP_IS_PAYMENT
    },
    {
      title: "\u5546\u6237\u540D\u79F0",
      dataIndex: "merchantName",
      hideInSearch: true
    },
    {
      title: "\u63D0\u73B0\u91D1\u989D",
      dataIndex: "amount",
      hideInSearch: true
    },
    {
      title: "\u8BA2\u5355\u91D1\u989D",
      dataIndex: "orderAmount",
      valueType: "digitRange",
      hideInTable: true,
      hideInSearch: !APP_IS_PAYMENT,
      search: {
        transform: (value) => {
          return {
            amountMin: value?.[0],
            amountMax: value?.[1]
          };
        }
      }
    },
    {
      title: APP_IS_PAYMENT ? "\u9700\u6253\u6B3E\u91D1\u989D" : "\u5B9E\u9645\u83B7\u5F97\u63D0\u73B0\u91D1\u989D",
      dataIndex: "realAmount",
      hideInSearch: true,
      width: 130,
      render: (_, record) => /* @__PURE__ */ React.createElement("span", { className: record?.auditStatus === 0 ? "text-red" : "" }, record?.realAmount)
    },
    {
      title: "\u6362\u7B97\u7CFB\u6570",
      dataIndex: "exchangeRate",
      hideInSearch: true
    },
    {
      title: "\u624B\u7EED\u8D39",
      dataIndex: "handlingFee",
      hideInSearch: true
    },
    {
      title: "\u53D1\u8D77\u65F6\u95F4",
      dataIndex: "createTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      width: 160,
      colSize: 1.5,
      render: (_, record) => record?.createTime,
      search: {
        transform: (value) => {
          return {
            beginTime: value?.[0],
            endTime: value?.[1]
          };
        }
      }
    },
    {
      title: "\u66F4\u65B0\u65F6\u95F4",
      dataIndex: "finishTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      width: 160,
      colSize: 1.5,
      render: (_, record) => record?.finishTime,
      search: {
        transform: (value) => {
          return {
            finishBeginTime: value?.[0],
            finishEndTime: value?.[1]
          };
        }
      }
    },
    {
      title: "\u63D0\u73B0\u7C7B\u578B",
      dataIndex: "exchangeType",
      valueType: "select",
      request: async () => [
        {
          label: "\u5168\u90E8",
          value: ""
        },
        ...WithdrawExchangeTypeOptions
      ],
      fieldProps: {
        defaultValue: "",
        allowClear: false
      }
    },
    {
      title: "\u9700\u6253\u6B3E\u8D27\u5E01\u91D1\u989D",
      dataIndex: "amountUSDT",
      hideInSearch: true,
      width: 160
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      width: 140,
      request: async () => getCurrencyOptionItems(),
      fieldProps: {
        defaultValue: "",
        allowClear: false
      }
    },
    {
      title: "\u5BA1\u6838\u72B6\u6001",
      dataIndex: "auditStatus",
      valueType: "select",
      request: async () => [
        {
          label: "\u5168\u90E8",
          value: ""
        },
        ...WithdrawAuditStatusOptions
      ],
      fieldProps: {
        defaultValue: "",
        allowClear: false
      },
      render: (text, record) => {
        const findItem = WithdrawAuditStatusOptions.find(
          (item) => item.value === record?.auditStatus
        );
        return /* @__PURE__ */ React.createElement(Tag, { color: findItem?.color }, text);
      }
    },
    {
      title: "\u53D1\u8D77\u4EBA\u8D26\u53F7",
      dataIndex: "createBy",
      hideInSearch: true,
      ellipsis: true
    },
    {
      title: "\u63D0\u73B0IP",
      dataIndex: "exchangeIp",
      hideInSearch: true,
      hideInTable: !APP_IS_PAYMENT
    },
    {
      title: "\u5907\u6CE8",
      dataIndex: "remark",
      width: 140,
      hideInSearch: true
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      hideInTable: !APP_IS_PAYMENT
    }
  ];
  return /* @__PURE__ */ React.createElement(
    TablePage,
    {
      tableRef,
      searchFormRef,
      columns,
      scroll: { x: 2100 },
      actionsWidth: 145,
      listRequest,
      onReset: () => {
        searchFormRef.current?.resetFields();
        setSearchParams({});
      },
      actions: (record) => APP_IS_PAYMENT ? [
        /* @__PURE__ */ React.createElement(
          ViewDetail,
          {
            key: "view",
            record,
            reload: tableRef?.current?.reload
          }
        ),
        record?.auditStatus !== 2 && record?.auditStatus !== 4 && /* @__PURE__ */ React.createElement(
          ChangeStatus,
          {
            key: "change-status",
            record,
            reload: tableRef?.current?.reload
          }
        )
      ] : [],
      toolBarActions: () => [
        !APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(
          ManualWithdraw,
          {
            key: "manual-withdraw",
            reload: tableRef?.current?.reload
          }
        )
      ],
      footer: () => /* @__PURE__ */ React.createElement("div", { className: "footer-statistic" }, /* @__PURE__ */ React.createElement("div", { className: "row" }, /* @__PURE__ */ React.createElement("span", { className: "row-title" }, "\u63D0\u73B0\u6B21\u6570\uFF1A"), /* @__PURE__ */ React.createElement(Statistic, { title: "\u5F85\u6253\u6B3E", value: statisticData?.pendingNum || 0 }), /* @__PURE__ */ React.createElement(Statistic, { title: "\u5DF2\u6253\u6B3E", value: statisticData?.payedNum || 0 }), /* @__PURE__ */ React.createElement(Statistic, { title: "\u6253\u6B3E\u4E2D", value: statisticData?.payingNum || 0 }), /* @__PURE__ */ React.createElement(Statistic, { title: "\u5DF2\u9000\u6B3E", value: statisticData?.refundNum || 0 })), /* @__PURE__ */ React.createElement("div", { className: "row" }, /* @__PURE__ */ React.createElement("span", { className: "row-title" }, "\u63D0\u73B0\u91D1\u989D\uFF1A"), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5F85\u6253\u6B3E",
          value: statisticData?.pendingAmount || 0
        }
      ), /* @__PURE__ */ React.createElement(Statistic, { title: "\u5DF2\u6253\u6B3E", value: statisticData?.payedAmount || 0 }), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5B9E\u9645\u6253\u6B3E",
          value: statisticData?.realAmount || 0
        }
      ), /* @__PURE__ */ React.createElement(Statistic, { title: "\u624B\u7EED\u8D39", value: statisticData?.handlingFee || 0 }), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u6253\u6B3E\u4E2D",
          value: statisticData?.payingAmount || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5DF2\u9000\u6B3E",
          value: statisticData?.refundAmount || 0
        }
      )))
    }
  );
};
