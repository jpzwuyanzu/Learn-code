import services from "@/services";
import { Button, message } from "antd";
import { useRef, useState } from "react";
import {
  ModalForm,
  ProFormDigit,
  ProFormField
} from "@ant-design/pro-components";
import { useAsyncEffect } from "ahooks";
export default (props) => {
  const formRef = useRef();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currencyItems, setCurrencyItems] = useState([]);
  const { rateType, configId, triggerType } = props;
  useAsyncEffect(async () => {
    if (isModalOpen) {
      const params = { rateType };
      if (configId !== void 0) {
        params.configId = configId;
      }
      const data = await services.finance.withdrawInfoManage.listCurrencyRate(params);
      setCurrencyItems(data);
    } else {
      setCurrencyItems([]);
    }
  }, [isModalOpen]);
  const onValuesChange = () => {
    const values = formRef.current.getFieldsValue();
    for (const key in values) {
      if (!values[key]) {
        formRef.current.setFieldValue(key, 1);
      }
    }
  };
  const title = rateType === 1 ? "\u5145\u503C\u8D27\u5E01\u7CFB\u6570\u914D\u7F6E" : "\u63D0\u73B0\u8D27\u5E01\u7CFB\u6570\u914D\u7F6E";
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      layout: "horizontal",
      formRef,
      title,
      open: isModalOpen,
      grid: true,
      width: 600,
      trigger: triggerType === "link" ? /* @__PURE__ */ React.createElement("a", { onClick: () => setIsModalOpen(true) }, "\u8D27\u5E01\u7CFB\u6570\u914D\u7F6E") : /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsModalOpen(true) }, "\u8D27\u5E01\u7CFB\u6570\u914D\u7F6E"),
      onFinish: async (formData) => {
        const _formData = Object.keys(formData).map((key) => {
          const findItem = currencyItems.find((item) => item.currency === key);
          const result = {
            ...findItem,
            currencyRate: formData[key] || 1,
            rateType
          };
          if (configId !== void 0) {
            result.configId = configId;
          }
          return result;
        });
        await services.finance.withdrawInfoManage.updateCurrencyRate(_formData);
        message.success("\u914D\u7F6E\u6210\u529F");
        setIsModalOpen(false);
      },
      modalProps: {
        destroyOnClose: true,
        onCancel: () => setIsModalOpen(false)
      },
      onValuesChange
    },
    /* @__PURE__ */ React.createElement(ProFormField, null, /* @__PURE__ */ React.createElement("div", null, "\u8D27\u5E01\u7B79\u7801\u7CFB\u6570\uFF1A1USDT=\uFF1F\u8D27\u5E01")),
    currencyItems.map((item) => {
      return /* @__PURE__ */ React.createElement(
        ProFormDigit,
        {
          colProps: { span: 11, offset: 1 },
          key: item.currency,
          name: item.currency,
          label: item.currency,
          initialValue: item.currencyRate,
          placeholder: item.currencyName,
          fieldProps: {
            min: 0,
            max: 100,
            precision: 5
          }
        }
      );
    }),
    /* @__PURE__ */ React.createElement(ProFormField, null, /* @__PURE__ */ React.createElement("div", { className: "text-red" }, "\u652F\u6301\u5C0F\u6570\u70B9\u540E5\u4F4D\uFF0C\u598218.00000\uFF0C\u5219\u8868\u793A\u652F\u4ED8U\u91D1\u989D=\u5145\u503C\u8D27\u5E01\u91D1\u989D/18.00000\uFF1B\u4E0D\u586B\u5219\u9ED8\u8BA4\u4E3A1.00000"))
  );
};
