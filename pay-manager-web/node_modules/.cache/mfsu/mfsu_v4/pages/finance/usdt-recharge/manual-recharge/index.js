import services from "@/services";
import {
  Button,
  message,
  Typography
} from "antd";
import { useRef, useState } from "react";
import common from "@/utils/common";
import { useModel } from "@@/exports";
import {
  ModalForm,
  ProFormDigit,
  ProFormField,
  ProFormSelect,
  ProFormText
} from "@ant-design/pro-components";
import usdt from "@/assets/usdt.png";
import { APP_IS_PAYMENT } from "@/constants";
import "./index.less";
import { useAsyncEffect } from "ahooks";
export default (props) => {
  const formRef = useRef();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { merchantInfo } = useModel("merchant");
  const [total, setTotal] = useState(0);
  const [amount, setAmount] = useState(0);
  const [address, setAddress] = useState("");
  const [USDTAddress, setUSDTAddress] = useState("");
  const [currency, setCurrency] = useState("");
  const [currencyItems, setCurrencyItems] = useState([]);
  const [currencyRateItemMap, setCurrencyRateItemMap] = useState([]);
  const [currencyRate, setCurrencyRate] = useState(0);
  const [rechargeConfig, setRechargeConfig] = useState({
    currency: "BRL,INR",
    minRecharge: 0,
    maxRecharge: 0
  });
  const title = APP_IS_PAYMENT ? "\u624B\u52A8\u5145\u503C" : "\u53D1\u8D77\u5145\u503C";
  useAsyncEffect(async () => {
    const data = await services.finance.withdrawInfoManage.listCurrencyRate({
      rateType: 1
    });
    const map = {};
    data.forEach((item) => {
      map[item.currency] = item;
    });
    setCurrencyRateItemMap(map);
    const currencyOptions = await services.finance.usdtRecharge.getCurrencyOptions();
    setCurrencyItems(currencyOptions);
  }, []);
  const getUSDTAddress = async (currencyCode) => {
    const { address: address2, minRecharge, maxRecharge } = await services.finance.usdtRecharge.getUSDTAddress({
      currency: currencyCode
    });
    setUSDTAddress(address2);
    setRechargeConfig({
      minRecharge,
      maxRecharge
    });
  };
  useAsyncEffect(async () => {
    if (currency) {
      setCurrencyRate(currencyRateItemMap[currency].currencyRate);
      await getUSDTAddress(currency);
    }
  }, [currency]);
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      className: "manual-recharge-modal",
      layout: "horizontal",
      labelCol: { span: 6 },
      formRef,
      title,
      open: isModalOpen,
      onOpenChange: (open) => {
        if (open) {
          setIsModalOpen(true);
        }
      },
      width: 700,
      trigger: props?.children || /* @__PURE__ */ React.createElement(Button, { type: "primary", onClick: () => setIsModalOpen(true) }, title),
      onFinish: async (formData) => {
        const request = APP_IS_PAYMENT ? services.finance.usdtRecharge.recharge : services.finance.usdtRecharge.merchantRecharge;
        if (!APP_IS_PAYMENT) {
          formData.merchantId = merchantInfo.merchantId;
          formData.address = USDTAddress;
        }
        await request(formData);
        message.success("\u64CD\u4F5C\u6210\u529F");
        setIsModalOpen(false);
        if (props?.reload) {
          props.reload();
        }
      },
      modalProps: {
        onCancel: () => setIsModalOpen(false),
        okText: APP_IS_PAYMENT ? "\u786E\u5B9A" : "\u63D0\u4EA4\u8BA2\u5355"
      },
      onValuesChange: (values) => {
        if (values.amount)
          setAmount(values.amount);
        if (values.currency)
          setCurrency(values.currency);
      }
    },
    APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "\u5546\u6237ID",
        name: "merchantId",
        rules: [common.ruleUtils.getRule("required")],
        placeholder: "\u8BF7\u8F93\u5165\u5546\u6237ID"
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormSelect,
      {
        label: "\u5E01\u79CD",
        name: "currency",
        options: currencyItems,
        rules: [common.ruleUtils.getRule("required")],
        placeholder: "\u8BF7\u9009\u62E9\u5E01\u79CD"
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormDigit,
      {
        label: "\u5145\u503C\u91D1\u989D",
        name: "amount",
        placeholder: `\u8F93\u5165\u9700\u8981\u5145\u503C\u7684\u91D1\u989D${!APP_IS_PAYMENT ? `\uFF0C\u6700\u4F4E ${rechargeConfig.minRecharge}\uFF0C\u6700\u9AD8 ${rechargeConfig.maxRecharge}` : ""}`,
        min: APP_IS_PAYMENT ? 0 : rechargeConfig.minRecharge,
        max: APP_IS_PAYMENT ? null : rechargeConfig.maxRecharge,
        fieldProps: {
          precision: 2
        },
        rules: [common.ruleUtils.getRule("notZero")]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormField,
      {
        label: APP_IS_PAYMENT ? "\u652F\u4ED8\u7684\u91D1\u989D" : "\u60A8\u9700\u8981\u652F\u4ED8\u7684USDT\u91D1\u989D"
      },
      /* @__PURE__ */ React.createElement("div", { className: "usd-computed" }, /* @__PURE__ */ React.createElement("div", { className: "usd-computed" }, /* @__PURE__ */ React.createElement("span", { className: "border" }, amount || 0), /* @__PURE__ */ React.createElement("span", null, "\xF7"), /* @__PURE__ */ React.createElement("span", { className: "border" }, currencyRate), /* @__PURE__ */ React.createElement("span", null, "="), /* @__PURE__ */ React.createElement("span", { className: "border" }, /* @__PURE__ */ React.createElement("img", { src: usdt, alt: "usdt" }), amount && currencyRate ? (amount / currencyRate).toFixed(2) : 0)))
    ),
    APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "\u5907\u6CE8",
        name: "remark",
        rules: [common.ruleUtils.getRule("required")],
        placeholder: "\u8BF7\u8F93\u5165\u5907\u6CE8"
      }
    ),
    !APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(ProFormField, { label: "\u6536\u6B3EUSDT\u5730\u5740" }, /* @__PURE__ */ React.createElement(Typography.Text, { copyable: true }, USDTAddress)),
    !APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        label: "UTR",
        name: "txnId",
        placeholder: "\u8BF7\u8F93\u5165UTR\u51ED\u8BC1",
        rules: [common.ruleUtils.getRule("required")]
      }
    ),
    /* @__PURE__ */ React.createElement(ProFormField, null, APP_IS_PAYMENT ? /* @__PURE__ */ React.createElement("div", { className: "tips" }, /* @__PURE__ */ React.createElement("div", { className: "text-red" }, "\u6B64\u4E3A\u5546\u6237\u65E0\u6CD5\u53CA\u65F6\u63D0\u5355\u7B49\u7279\u6B8A\u60C5\u51B5\u3002\u53EF\u4EE5\u4EBA\u5DE5\u521B\u5EFA\u8BA2\u5355\u8FDB\u884CUSDT\u5145\u503C")) : /* @__PURE__ */ React.createElement("div", { className: "tips" }, /* @__PURE__ */ React.createElement("div", { className: "text-red" }, /* @__PURE__ */ React.createElement("p", null, "\u5145\u503C\u6B65\u9AA4\uFF1A"), /* @__PURE__ */ React.createElement("p", null, "1\u3001\u7EBF\u4E0B\u8F6C\u8D26\u5BF9\u5E94\u7684USDT\u6570\u91CF\u81F3\u6536\u6B3EUSDT\u5730\u5740"), /* @__PURE__ */ React.createElement("p", null, "2\u3001\u7136\u540E\u70B9\u51FB\u3010\u63D0\u4EA4\u8BA2\u5355\u3011\u7B49\u5F85\u5904\u7406\uFF0C\u8BF7\u52FF\u91CD\u590D\u63D0\u4EA4"), /* @__PURE__ */ React.createElement("p", null, "3\u3001\u5982\u6709\u7591\u95EE\uFF0C\u8BF7\u8054\u7CFB\u5546\u52A1")), /* @__PURE__ */ React.createElement("div", { className: "text-red" }, /* @__PURE__ */ React.createElement("p", null, "\u5145\u503C\u9700\u77E5\uFF1A"), /* @__PURE__ */ React.createElement("p", null, "1\u3001\u6700\u4F4E\u5145\u503C ", rechargeConfig.minRecharge), /* @__PURE__ */ React.createElement("p", null, "2\u3001\u5982\u6709\u7591\u95EE\uFF0C\u8BF7\u8054\u7CFB\u5546\u52A1"))))
  );
};
