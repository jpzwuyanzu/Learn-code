import { TablePage } from "@/components";
import services from "@/services";
import { useModel, useSearchParams, useLocation } from "umi";
import { Modal, Statistic, Tag } from "antd";
import React, { useEffect, useRef, useState } from "react";
import {
  APP_IS_PAYMENT,
  BaseModalConfig,
  USDTOrderStatusOptions
} from "@/constants";
import ManualRecharge from "@/pages/finance/usdt-recharge/manual-recharge";
import common from "@/utils/common";
export default () => {
  const tableRef = useRef();
  const searchFormRef = useRef();
  const { getCurrencyOptionItems } = useModel("global");
  const [searchParams, setSearchParams] = useSearchParams();
  const location = useLocation();
  const [statisticData, setStatisticData] = useState({
    rechargeNum: "",
    rechargeSucAmount: "",
    rechargeSucNum: ""
  });
  const listRequest = async (params) => {
    const { records, total, data } = await services.finance.usdtRecharge.list(params);
    setStatisticData(data);
    return {
      success: true,
      data: records,
      total
    };
  };
  useEffect(() => {
    searchFormRef.current?.setFieldsValue({
      orderNumber: searchParams.get("orderNumber")
    });
    searchFormRef.current?.submit();
  }, [location.search]);
  const columns = [
    {
      title: "\u8BA2\u5355\u53F7",
      dataIndex: "orderNumber",
      width: 200,
      copyable: true,
      initialValue: searchParams.get("orderNumber")
    },
    {
      title: "\u6536\u6B3EID",
      dataIndex: "payeeId",
      hideInTable: true
    },
    {
      title: "\u64CD\u4F5C\u524D\u4F59\u989D",
      dataIndex: "beforeMoney",
      hideInSearch: true
    },
    {
      title: "\u64CD\u4F5C\u540E\u4F59\u989D",
      dataIndex: "afterMoney",
      hideInSearch: true
    },
    {
      title: "\u5145\u503C\u91D1\u989D",
      dataIndex: "rechargeAmount"
    },
    {
      title: "\u6362\u7B97\u7CFB\u6570",
      dataIndex: "exchangeRate",
      hideInSearch: true
    },
    {
      title: "USDT\u91D1\u989D",
      dataIndex: "amountUSDT"
    },
    {
      title: "\u5546\u54C1\u540D\u79F0",
      dataIndex: "merchantName",
      hideInSearch: true
    },
    {
      title: "\u5546\u6237ID",
      dataIndex: "merchantId"
    },
    {
      title: "\u6536\u6B3E\u5730\u5740",
      dataIndex: "receiptsAddress",
      hideInSearch: true,
      width: 250,
      ellipsis: true,
      copyable: true
    },
    {
      title: "UTR",
      dataIndex: "txnId",
      width: 140,
      ellipsis: true
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: async () => getCurrencyOptionItems(),
      width: 140,
      fieldProps: {
        allowClear: false,
        defaultValue: ""
      }
    },
    {
      title: "\u652F\u4ED8\u72B6\u6001",
      dataIndex: "status",
      valueType: "select",
      request: async () => [
        { label: "\u5168\u90E8", value: "" },
        ...USDTOrderStatusOptions
      ],
      render: (dom, record) => {
        const item = USDTOrderStatusOptions.find(
          (item2) => item2.value === record.status
        );
        return /* @__PURE__ */ React.createElement(Tag, { color: item.color }, dom);
      },
      fieldProps: {
        allowClear: false,
        defaultValue: ""
      }
    },
    {
      title: "\u53D1\u8D77\u65F6\u95F4",
      dataIndex: "createTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      width: 160,
      search: {
        transform: (value) => {
          return {
            beginTime: value[0],
            endTime: value[1]
          };
        }
      },
      render: (dom, record) => record?.createTime
    },
    {
      title: "\u5B8C\u6210\u65F6\u95F4",
      dataIndex: "finishTime",
      valueType: "dateTimeRange",
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"],
        presets: common.dateUtils.rangePresets,
        showTime: {
          defaultValue: common.dateUtils.rangeDefaultTime()
        }
      },
      width: 160,
      search: {
        transform: (value) => {
          return {
            startFinishTime: value[0],
            endFinishTime: value[1]
          };
        }
      },
      render: (dom, record) => record?.finishTime
    },
    {
      title: "\u53D1\u8D77\u4EBA\u8D26\u53F7",
      dataIndex: "createBy"
    },
    {
      title: "\u5907\u6CE8",
      dataIndex: "remark",
      width: 150,
      hideInSearch: true,
      hideInTable: !APP_IS_PAYMENT
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      hideInSearch: true,
      hideInTable: !APP_IS_PAYMENT
    }
  ];
  const changeStatus = (record, status, title) => {
    Modal.confirm({
      title,
      content: `\u786E\u8BA4\u8981${title}\u5417\uFF1F`,
      onOk: async () => {
        await services.finance.usdtRecharge.updateStatus({
          id: record.id,
          status
        });
        tableRef.current.reload();
      },
      ...BaseModalConfig
    });
  };
  return /* @__PURE__ */ React.createElement(
    TablePage,
    {
      tableRef,
      searchFormRef,
      columns,
      listRequest,
      scroll: { x: 2500 },
      actionsWidth: APP_IS_PAYMENT ? 155 : 160,
      onReset: () => {
        searchFormRef.current?.resetFields();
        setSearchParams({});
      },
      actions: (record) => APP_IS_PAYMENT ? [
        record?.status === 0 && /* @__PURE__ */ React.createElement(
          "a",
          {
            key: "confirm-pay",
            onClick: () => changeStatus(record, 1, "\u786E\u8BA4\u5145\u503C")
          },
          "\u786E\u8BA4\u5145\u503C"
        ),
        record?.status === 0 && /* @__PURE__ */ React.createElement(
          "a",
          {
            key: "cancel-pay",
            className: "text-red",
            onClick: () => changeStatus(record, 2, "\u53D6\u6D88\u5145\u503C")
          },
          "\u62D2\u7EDD\u53D6\u6D88"
        )
      ] : [],
      footer: () => /* @__PURE__ */ React.createElement("div", { className: "footer-statistic" }, /* @__PURE__ */ React.createElement("div", { className: "row" }, /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5145\u503C\u6B21\u6570",
          value: statisticData?.rechargeNum || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5145\u503C\u6210\u529F\u6B21\u6570",
          value: statisticData?.rechargeSucNum || 0
        }
      ), /* @__PURE__ */ React.createElement(
        Statistic,
        {
          title: "\u5145\u503C\u6210\u529F\u603B\u91D1\u989D",
          value: statisticData?.rechargeSucAmount || 0
        }
      ))),
      toolBarActions: () => [
        /* @__PURE__ */ React.createElement(
          ManualRecharge,
          {
            key: "manualRecharge",
            reload: tableRef.current.reload
          }
        )
      ]
    }
  );
};
