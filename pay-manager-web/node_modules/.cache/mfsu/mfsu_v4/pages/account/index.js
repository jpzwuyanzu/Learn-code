import { CreateCard, WithButton } from "@/components";
import { Spin } from "antd";
import { useState, useRef } from "react";
import { useAccess } from "@umijs/max";
import { ProDescriptions } from "@ant-design/pro-components";
import UsdtModel from "./modal/usdtModel";
import PayPasswordModel from "./modal/payPasswordModel";
import ValidPasswordModel from "./modal/validPasswordModel";
import "./styles.less";
import common from "@/utils/common";
import ChannelModel from "@/pages/account/modal/channelModel";
import { useModel } from "umi";
import { useAsyncEffect } from "ahooks";
import BalanceModel from "@/pages/account/modal/balanceModel";
import CallbackModel from "@/pages/account/modal/callbackModel";
import KeyModel from "@/pages/account/modal/keyModel";
export default () => {
  const { isAdmin, merchantInfo, getMerchantInfo, isFirstPayPassword } = useModel("merchant");
  const actionRef = useRef();
  const [loading, setLoading] = useState(false);
  const [USDTVisible, setUSDTVisible] = useState(false);
  const [payPwdVisible, setPayPwdVisible] = useState(false);
  const [payValidVisible, setPayValidVisible] = useState(false);
  const [channelVisible, setChannelVisible] = useState(false);
  const [balanceVisible, setBalanceVisible] = useState(false);
  const [keyVisible, setKeyVisible] = useState(false);
  const [callbackVisible, setCallbackVisible] = useState(false);
  const [callback, setCallback] = useState(() => () => {
  });
  const access = useAccess();
  console.log(access, "access ------");
  const requestAccountInfo = async () => {
    setLoading(true);
    const merchantInfo2 = await getMerchantInfo();
    setLoading(false);
    return {
      success: true,
      data: merchantInfo2
    };
  };
  useAsyncEffect(async () => {
    await requestAccountInfo();
  }, []);
  const placeholder = "-";
  const validPassCall = (callback2) => {
    if (isFirstPayPassword) {
      callback2();
    } else {
      setCallback(() => {
        return callback2;
      });
      setPayValidVisible(true);
    }
  };
  const columns = [
    {
      title: "\u767B\u5F55\u8D26\u53F7",
      dataIndex: "userName",
      key: "userName",
      valueType: "text",
      copyable: true
    },
    {
      title: "\u5546\u6237\u540D\u79F0",
      dataIndex: "merchantName",
      key: "merchantName"
    },
    {
      title: "\u5546\u6237\u53F7",
      dataIndex: "merchantId",
      key: "merchantId"
    },
    {
      title: "\u63D0\u73B0USDT\u5730\u5740",
      dataIndex: "usdt",
      key: "usdt",
      render: () => /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", null, merchantInfo.usdt ?? placeholder), /* @__PURE__ */ React.createElement(
        WithButton,
        {
          auth: "system-account-info-update",
          type: "primary",
          style: { marginLeft: "20px" },
          onClick: () => setUSDTVisible(true)
        },
        "\u66F4\u6539"
      ))
    },
    {
      title: "\u53EF\u7528\u4F59\u989D",
      dataIndex: "balance",
      key: "balance",
      render: () => /* @__PURE__ */ React.createElement(
        WithButton,
        {
          auth: "system-account-info-balance",
          type: "primary",
          onClick: () => {
            validPassCall(() => {
              setBalanceVisible(true);
            });
          }
        },
        "\u67E5\u770B\u4F59\u989D"
      )
    },
    {
      title: "\u5176\u4ED6\u64CD\u4F5C",
      dataIndex: "other",
      key: "other",
      render: () => /* @__PURE__ */ React.createElement("div", { className: "account-actions" }, common.antdUtils.renderTableAction(
        [
          {
            label: "API\u6587\u6863\u4E0B\u8F7D",
            auth: "system-account-info-api",
            type: "primary",
            onClick: () => {
              location.href = "https://iggame.work/\u5BF9\u63A5\u6587\u6863.zip";
            }
          },
          {
            label: "\u4FEE\u6539\u652F\u4ED8\u5BC6\u7801",
            auth: "system-account-info-password",
            type: "primary",
            onClick: () => setPayPwdVisible(true)
          },
          {
            label: "\u4FEE\u6539\u56DE\u8C03\u5730\u5740",
            auth: "system-account-info-callback",
            type: "primary",
            onClick: () => {
              validPassCall(() => {
                setCallbackVisible(true);
              });
            }
          },
          {
            label: "\u67E5\u770B\u5BC6\u94A5",
            auth: "system-account-info-key",
            type: "primary",
            onClick: () => {
              validPassCall(async () => {
                setKeyVisible(true);
              });
            }
          },
          {
            label: "\u901A\u9053\u8D39\u7387",
            auth: "system-account-info-channel",
            type: "primary",
            onClick: () => {
              validPassCall(() => {
                setChannelVisible(true);
              });
            }
          }
        ],
        true
      ))
    }
  ];
  return /* @__PURE__ */ React.createElement(CreateCard, { moduleTitle: ["\u8D26\u6237\u4FE1\u606F"] }, /* @__PURE__ */ React.createElement(Spin, { tip: "Loading...", spinning: loading }, /* @__PURE__ */ React.createElement("div", { className: "account-info" }, /* @__PURE__ */ React.createElement(
    ProDescriptions,
    {
      actionRef,
      loading: false,
      columns,
      request: requestAccountInfo,
      column: 1,
      size: "default",
      labelStyle: { width: "120px" }
    }
  ))), /* @__PURE__ */ React.createElement(
    ValidPasswordModel,
    {
      visible: payValidVisible,
      setVisible: setPayValidVisible,
      callback
    }
  ), /* @__PURE__ */ React.createElement(
    UsdtModel,
    {
      visible: USDTVisible,
      setVisible: setUSDTVisible,
      current: merchantInfo,
      reload: actionRef.current?.reload
    }
  ), /* @__PURE__ */ React.createElement(
    PayPasswordModel,
    {
      visible: payPwdVisible,
      setVisible: setPayPwdVisible,
      current: merchantInfo
    }
  ), /* @__PURE__ */ React.createElement(
    ChannelModel,
    {
      visible: channelVisible,
      setVisible: setChannelVisible,
      current: merchantInfo
    }
  ), /* @__PURE__ */ React.createElement(
    BalanceModel,
    {
      visible: balanceVisible,
      setVisible: setBalanceVisible,
      current: merchantInfo
    }
  ), /* @__PURE__ */ React.createElement(
    KeyModel,
    {
      visible: keyVisible,
      setVisible: setKeyVisible,
      current: merchantInfo
    }
  ), /* @__PURE__ */ React.createElement(
    CallbackModel,
    {
      visible: callbackVisible,
      setVisible: setCallbackVisible,
      current: merchantInfo
    }
  ));
};
