import { ModalForm, ProFormText } from "@ant-design/pro-components";
import { useRef } from "react";
import services from "@/services";
import common from "@/utils/common";
import { message } from "antd";
export default (props) => {
  const { visible, setVisible, current } = props;
  const formRef = useRef();
  return /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: "\u4FEE\u6539\u652F\u4ED8\u5BC6\u7801",
      formRef,
      open: visible,
      autoFocusFirstInput: true,
      grid: true,
      modalProps: {
        centered: true,
        destroyOnClose: true,
        onCancel: () => setVisible(false)
      },
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 500,
      onFinish: async (values) => {
        values.id = current.merchantId;
        await services.accountInfo.updatePayPassword(values);
        setVisible(false);
        message.success("\u4FEE\u6539\u6210\u529F");
        return true;
      },
      initialValues: { username: current?.userName }
    },
    current?.isPayPassword === 1 && /* @__PURE__ */ React.createElement(
      ProFormText.Password,
      {
        name: "oldPayPassword",
        label: "\u65E7\u5BC6\u7801",
        placeholder: "\u8BF7\u8F93\u5165\u65E7\u5BC6\u7801",
        fieldProps: {
          maxLength: 20
        },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u65E7\u5BC6\u7801"),
          common.ruleUtils.getRule("password")
        ]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText.Password,
      {
        name: "payPassword",
        label: "\u65B0\u5BC6\u7801",
        placeholder: "\u8BF7\u8F93\u5165\u65B0\u5BC6\u7801",
        fieldProps: {
          maxLength: 20
        },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5BC6\u7801"),
          common.ruleUtils.getRule("password"),
          common.ruleUtils.getRule("validator", "", {
            validator: (rule, value, callback) => {
              const oldPwd = formRef.current.getFieldFormatValue("oldPayPassword");
              if (oldPwd && oldPwd === value) {
                return callback("\u65B0\u5BC6\u7801\u4E0E\u65E7\u5BC6\u7801\u4E0D\u53EF\u76F8\u540C");
              }
              return callback();
            }
          })
        ]
      }
    ),
    /* @__PURE__ */ React.createElement(
      ProFormText.Password,
      {
        name: "confirmPassword",
        label: "\u786E\u8BA4\u5BC6\u7801",
        placeholder: "\u8BF7\u518D\u6B21\u8F93\u5165\u5BC6\u7801",
        fieldProps: {
          maxLength: 20
        },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5BC6\u7801"),
          // common.ruleUtils.getRule('password'),
          common.ruleUtils.getRule("validator", "", {
            validator: (rule, value, callback) => {
              const oldPwd = formRef.current.getFieldFormatValue("payPassword");
              if (oldPwd && value && oldPwd !== value) {
                return callback("\u4E24\u6B21\u5BC6\u7801\u4E0D\u76F8\u540C\uFF0C\u8BF7\u68C0\u67E5");
              }
              return callback();
            }
          })
        ]
      }
    )
  );
};
