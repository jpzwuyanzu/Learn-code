import { useModel } from "@@/exports";
import { Button, Dropdown, Modal, Space } from "antd";
import { DownOutlined } from "@ant-design/icons";
import { ModalForm, ProForm, ProFormText } from "@ant-design/pro-components";
import services from "@/services";
import common from "@/utils/common";
import { useRef, useState } from "react";
import Notify from "@/components/HeaderRight/notify";
import { APP_IS_PAYMENT } from "@/constants";
export default () => {
  const { enterMode, isLogin, userInfo, _getUserInfo, _logout } = useModel("user");
  const formRef = useRef();
  const [isOpenPwd, setIsOpenPwd] = useState(false);
  const items = [
    {
      key: "change-password",
      label: "\u4FEE\u6539\u5BC6\u7801",
      style: { lineHeight: 2 }
    },
    {
      type: "divider"
    },
    {
      key: "logout",
      label: "\u9000\u51FA\u767B\u5F55",
      style: { lineHeight: 2 }
    }
  ];
  const PasswordModal = isLogin ? /* @__PURE__ */ React.createElement(
    ModalForm,
    {
      title: "\u4FEE\u6539\u5BC6\u7801",
      formRef,
      open: isOpenPwd,
      autoFocusFirstInput: true,
      modalProps: {
        centered: true,
        destroyOnClose: true,
        onCancel: () => setIsOpenPwd(false)
      },
      grid: true,
      colProps: { span: 24 },
      rowProps: { gutter: 10 },
      width: 500,
      onFinish: async (values) => {
        console.log(values);
        await services.user.resetUserPwd(values);
        Modal.confirm({
          centered: true,
          keyboard: false,
          maskClosable: false,
          closable: false,
          okText: false,
          title: "\u9000\u51FA\u767B\u5F55",
          content: "\u5BC6\u7801\u4FEE\u6539\u6210\u529F\u540E\u9700\u8981\u91CD\u65B0\u767B\u5F55",
          footer: /* @__PURE__ */ React.createElement("div", { style: { display: "flex", justifyContent: "flex-end" } }, /* @__PURE__ */ React.createElement(
            Button,
            {
              key: "submit",
              type: "primary",
              onClick: async () => {
                await _logout();
                setIsOpenPwd(false);
                Modal.destroyAll();
              }
            },
            "\u786E\u5B9A"
          ))
        });
        setIsOpenPwd(false);
        return true;
      },
      initialValues: { username: userInfo.userName }
    },
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormText,
      {
        name: "username",
        label: "\u8D26\u6237\u540D",
        placeholder: "\u8BF7\u8F93\u5165\u8D26\u6237\u540D",
        disabled: true,
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u7528\u6237\u540D!"),
          common.ruleUtils.getRule("username")
        ]
      }
    )),
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormText.Password,
      {
        name: "oldPassword",
        label: "\u65E7\u5BC6\u7801",
        placeholder: "\u8BF7\u8F93\u5165\u65E7\u5BC6\u7801",
        fieldProps: {
          maxLength: 20
        },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5BC6\u7801\uFF01"),
          common.ruleUtils.getRule("password")
        ]
      }
    )),
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement(
      ProFormText.Password,
      {
        name: "newPassword",
        label: "\u65B0\u5BC6\u7801",
        placeholder: "\u8BF7\u8F93\u5165\u65B0\u5BC6\u7801",
        fieldProps: {
          maxLength: 20
        },
        rules: [
          common.ruleUtils.getRule("required", "\u8BF7\u8F93\u5165\u5BC6\u7801\uFF01"),
          common.ruleUtils.getRule("password"),
          common.ruleUtils.getRule("validator", "", {
            validator: (rule, value, callback) => {
              const oldPwd = formRef.current.getFieldFormatValue("oldPassword");
              if (oldPwd && oldPwd === value) {
                return callback("\u65B0\u5BC6\u7801\u4E0E\u65E7\u5BC6\u7801\u4E0D\u53EF\u76F8\u540C");
              }
              return callback();
            }
          })
        ]
      }
    )),
    /* @__PURE__ */ React.createElement(ProForm.Group, null, /* @__PURE__ */ React.createElement("div", { style: { color: "#f29e42" } }, "\u5BC6\u7801\u4FEE\u6539\u6210\u529F\u540E\u9700\u8981\u91CD\u65B0\u767B\u5F55"))
  ) : null;
  const onClick = ({ key }) => {
    switch (key) {
      case "change-password": {
        setIsOpenPwd(true);
        break;
      }
      case "logout": {
        _logout();
        break;
      }
      default:
        break;
    }
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, APP_IS_PAYMENT && /* @__PURE__ */ React.createElement(Notify, null), /* @__PURE__ */ React.createElement(Dropdown, { menu: { items, onClick, style: { textAlign: "center" } } }, /* @__PURE__ */ React.createElement(Space, null, userInfo.userName && /* @__PURE__ */ React.createElement("span", null, "\u6B22\u8FCE\uFF1A", userInfo.userName), userInfo.roleName && /* @__PURE__ */ React.createElement("span", { style: { padding: "0 6px" } }, "\u5C97\u4F4D\uFF1A", userInfo.roleName), /* @__PURE__ */ React.createElement(DownOutlined, null))), PasswordModal);
};
