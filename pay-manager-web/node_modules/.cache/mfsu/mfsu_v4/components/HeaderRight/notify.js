import { useEffect, useRef, useState } from "react";
import { useModel } from "umi";
import { Badge, Button, Drawer, Radio, notification } from "antd";
import { BellOutlined } from "@ant-design/icons";
import { Client } from "@stomp/stompjs";
import rechargeAudio from "@/assets/recharge.mp3";
import withdrawAudio from "@/assets/withdraw.mp3";
import "./index.less";
import dayjs from "dayjs";
import utils from "@/utils";
import { history } from "umi";
var MessageType = /* @__PURE__ */ ((MessageType2) => {
  MessageType2[MessageType2["Recharge"] = 1] = "Recharge";
  MessageType2[MessageType2["Withdraw"] = 2] = "Withdraw";
  return MessageType2;
})(MessageType || {});
const messageTypeAudioMap = {
  [1 /* Recharge */]: rechargeAudio,
  [2 /* Withdraw */]: withdrawAudio
};
export default () => {
  const [api, contextHolder] = notification.useNotification();
  const { userInfo } = useModel("user");
  const notifyConfig = utils.localStorage.get("notify-config") || {
    notifyEnabled: 1,
    messages: []
  };
  const socketClient = useRef();
  const [isOpen, setIsOpen] = useState(false);
  const isOpenRef = useRef(isOpen);
  const [messages, setMessages] = useState(notifyConfig.messages);
  const [notifyEnabled, setNotifyEnabled] = useState(
    notifyConfig.notifyEnabled
  );
  const [unreadMsgCount, setUnreadMsgCount] = useState(0);
  useEffect(() => {
    utils.localStorage.set("notify-config", {
      notifyEnabled,
      messages
    });
  }, [notifyEnabled, messages]);
  useEffect(() => {
    setUnreadMsgCount(messages.filter((msg) => !msg.isRead).length);
  }, [messages]);
  useEffect(() => {
    isOpenRef.current = isOpen;
  }, [isOpen]);
  const playAudio = (type) => {
    const audio = messageTypeAudioMap[type];
    const audioDom = new Audio(audio);
    audioDom.play();
  };
  const openNotifyAlert = (message, description) => {
    if (isOpenRef.current)
      return;
    const key = utils.uuid();
    api.open({
      key,
      type: "info",
      message,
      description,
      duration: 1500,
      onClick: () => {
        setIsOpen(true);
        api.destroy(key);
      }
    });
  };
  const stopListenSocket = () => {
    if (socketClient?.current) {
      socketClient?.current?.deactivate({ force: true });
    }
  };
  const startListenSocket = () => {
    if (!userInfo.token)
      return;
    const scheme = location.protocol === "https:" ? "wss" : "ws";
    const url = `${scheme}://${location.host}/api/back-websocket/websocket?token=${userInfo.token}`;
    if (!socketClient?.current) {
      socketClient.current = new Client({
        brokerURL: url,
        heartbeatOutgoing: 15e3,
        heartbeatIncoming: 15e3,
        onConnect: () => {
          console.log("\u8FDE\u63A5\u6210\u529F");
          socketClient.current.subscribe("/topic/backstage", (data) => {
            const socketMsg = JSON.parse(data.body);
            socketMsg.message = JSON.parse(socketMsg.message);
            console.log(`\u6536\u5230\u6D88\u606F: `, socketMsg);
            const isRepeat = messages.some((msg) => {
              return msg.orderNo === socketMsg.message.orderNo;
            });
            if (isRepeat)
              return;
            const message = {
              id: utils.uuid(),
              eventType: socketMsg.eventType,
              ...socketMsg.message,
              createdTime: dayjs().format("YYYY-MM-DD HH:mm:ss"),
              isRead: false
            };
            const maxCount = 50;
            setMessages((messages2) => {
              return [message, ...messages2].slice(0, maxCount);
            });
            const typeName = message.type === 1 /* Recharge */ ? "\u5145\u503C" : "\u63D0\u73B0";
            openNotifyAlert(
              `${typeName}\u8BA2\u5355\u63D0\u9192`,
              `${message.orderNo} - \u5546\u6237\u6709\u65B0\u7684${typeName}\u8BA2\u5355`
            );
            playAudio(message.type);
          });
        },
        onDisconnect: () => {
          console.log("\u65AD\u5F00\u8FDE\u63A5");
        },
        onStompError: (frame) => {
          console.log("Broker reported error: " + frame.headers["message"]);
          console.log("Additional details: " + frame.body);
        }
      });
    }
    socketClient?.current?.activate();
  };
  useEffect(() => {
    if (notifyEnabled === 0) {
      stopListenSocket();
    } else {
      startListenSocket();
    }
  }, [notifyEnabled]);
  useEffect(() => {
    startListenSocket();
  }, [userInfo]);
  return /* @__PURE__ */ React.createElement("div", { className: "header-notify" }, contextHolder, /* @__PURE__ */ React.createElement(Badge, { count: unreadMsgCount }, /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsOpen(true), icon: /* @__PURE__ */ React.createElement(BellOutlined, null) })), /* @__PURE__ */ React.createElement(
    Drawer,
    {
      title: `\u6D88\u606F\u63D0\u9192(${messages.length})`,
      placement: "right",
      onClose: () => setIsOpen(false),
      open: isOpen,
      className: "notify-drawer"
    },
    /* @__PURE__ */ React.createElement("div", { className: "notify-config" }, /* @__PURE__ */ React.createElement("div", { className: "config" }, /* @__PURE__ */ React.createElement("div", { className: "label" }, "\u63D0\u9192\u63A5\u6536"), /* @__PURE__ */ React.createElement(
      Radio.Group,
      {
        value: notifyEnabled,
        onChange: (e) => setNotifyEnabled(e.target.value),
        options: [
          { label: "\u5F00\u542F", value: 1 },
          { label: "\u5173\u95ED", value: 0 }
        ]
      }
    )), unreadMsgCount > 0 && /* @__PURE__ */ React.createElement(
      "a",
      {
        onClick: () => {
          const newMessages = [...messages];
          newMessages.forEach((msg) => {
            msg.isRead = true;
          });
          setMessages(newMessages);
        }
      },
      "\u5168\u90E8\u5DF2\u8BFB"
    )),
    !messages.length ? /* @__PURE__ */ React.createElement("div", { className: "empty" }, "\u6682\u65E0\u6D88\u606F") : /* @__PURE__ */ React.createElement("div", { className: "list" }, messages.map((msg, index) => {
      const typeName = msg.type === 1 /* Recharge */ ? "\u5145\u503C" : "\u63D0\u73B0";
      return /* @__PURE__ */ React.createElement(
        "div",
        {
          className: `item ${msg.isRead ? "read" : "no-read"}`,
          key: msg.orderNo,
          onClick: () => {
            const newMessages = [...messages];
            newMessages[index].isRead = true;
            setMessages(newMessages);
          }
        },
        /* @__PURE__ */ React.createElement("div", { className: "meta" }, /* @__PURE__ */ React.createElement("div", { className: "time" }, msg.createdTime), /* @__PURE__ */ React.createElement("div", { className: `status ${msg.isRead ? "" : "no-read"}` }, msg.isRead ? "\u5DF2\u8BFB" : "\u672A\u8BFB")),
        /* @__PURE__ */ React.createElement("div", { className: "content" }, /* @__PURE__ */ React.createElement(
          "span",
          {
            className: "id",
            onClick: () => {
              if (msg.type === 1 /* Recharge */) {
                history.replace(
                  `/finance/usdt-recharge?orderNumber=${msg.orderNo}`
                );
              } else if (msg.type === 2 /* Withdraw */) {
                history.replace(
                  `/finance/withdraw-approval?orderNumber=${msg.orderNo}`
                );
              }
            }
          },
          msg.orderNo
        ), /* @__PURE__ */ React.createElement("span", { className: "split" }, "-"), /* @__PURE__ */ React.createElement("span", null, "\u5546\u6237\u6709\u65B0\u7684"), /* @__PURE__ */ React.createElement("span", { className: "type" }, typeName), /* @__PURE__ */ React.createElement("span", null, "\u8BA2\u5355"))
      );
    }))
  ));
};
