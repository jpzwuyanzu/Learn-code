import TablePage from "@/components/TablePage";
import services from "@/services";
import { Button, Modal } from "antd";
import { useEffect, useRef, useState } from "react";
import { ChannelBalanceRecordTypeOptions, System } from "@/constants";
import common from "@/utils/common";
import { useModel } from "umi";
export default (props) => {
  const tableRef = useRef();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { getMerchantOptionItems, getCurrencyOptionItems } = useModel("global");
  const listRequest = (params, sort, filter) => {
    params.type = props.type;
    return services.channel.tunnelMoneyRecordList(params);
  };
  useEffect(() => {
    if (isModalOpen) {
      tableRef?.current?.reload();
    }
  }, [isModalOpen]);
  const columns = [
    {
      title: "\u901A\u9053ID",
      dataIndex: "tunnelId",
      order: 10
    },
    {
      title: "\u8D26\u53D8\u91D1\u989D",
      dataIndex: "money",
      hideInSearch: true
    },
    {
      title: "\u901A\u9053\u4F59\u989D",
      dataIndex: "balance",
      hideInSearch: true
    },
    {
      title: "\u7C7B\u578B",
      dataIndex: "recordType",
      valueType: "select",
      request: async () => [
        {
          label: "\u5168\u90E8",
          value: ""
        },
        ...ChannelBalanceRecordTypeOptions
      ],
      fieldProps: {
        allowClear: false
      },
      order: 8
    },
    {
      title: "\u5E01\u79CD",
      dataIndex: "currency",
      valueType: "select",
      request: () => getCurrencyOptionItems(),
      fieldProps: {
        defaultValue: System.BaseAll,
        allowClear: false
      },
      order: 7
    },
    {
      title: "\u5546\u6237ID",
      dataIndex: "merchantId",
      order: 9
    },
    {
      title: "\u5907\u6CE8",
      dataIndex: "remark",
      hideInSearch: true
    },
    {
      title: "\u64CD\u4F5C\u4EBA",
      dataIndex: "updateBy",
      order: 0
    },
    {
      title: "\u65F6\u95F4",
      dataIndex: "createTime",
      valueType: "dateTimeRange",
      initialValue: common.dateUtils.getDateRange(7),
      render: (_, record) => record?.createTime,
      fieldProps: {
        placeholder: ["\u5F00\u59CB\u65F6\u95F4", "\u7ED3\u675F\u65F6\u95F4"]
      },
      order: 1,
      search: {
        transform: (value) => {
          return {
            beginTime: value[0],
            endTime: value[1]
          };
        }
      },
      formItemProps: {
        rules: [
          {
            required: true
          }
        ]
      },
      colSize: 1.5
    }
  ];
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Button, { onClick: () => setIsModalOpen(true) }, "\u901A\u9053\u4F59\u989D\u8BB0\u5F55"), /* @__PURE__ */ React.createElement(
    Modal,
    {
      title: "\u901A\u9053\u4F59\u989D\u8BB0\u5F55",
      open: isModalOpen,
      footer: null,
      width: 1400,
      onCancel: () => {
        setIsModalOpen(false);
      }
    },
    /* @__PURE__ */ React.createElement("div", { className: "modal-table" }, /* @__PURE__ */ React.createElement(
      TablePage,
      {
        tableRef,
        hiddenToolBar: true,
        columns,
        cardBordered: {
          search: true,
          table: false
        },
        searchConfig: {
          span: 6,
          labelWidth: 75
        },
        pageSize: 10,
        listRequest
      }
    ))
  ));
};
