import React, {
  useEffect,
  useRef,
  useState,
  forwardRef,
  useImperativeHandle
} from "react";
import { FormType, RowActionType } from "@/types";
import { Button, message, Modal } from "antd";
import FormModal from "./form-modal";
import { WithLink } from "@/components";
import {
  ProTable
} from "@ant-design/pro-components";
import dayjs from "dayjs";
import { LoadingOutlined, ReloadOutlined } from "@ant-design/icons";
import _ from "lodash";
import { BaseModalConfig } from "@/constants";
const TablePage = (props, ref) => {
  const tableRef = props.tableRef ?? useRef();
  const searchFormRef = props.searchFormRef ?? useRef();
  const formRef = useRef();
  const [polling, setPolling] = useState(void 0);
  const [listRequestTime, setListRequestTime] = useState("");
  const [exportLoading, setExportLoading] = useState(false);
  const [dataSource, setDataSource] = useState([]);
  useEffect(() => {
    setPolling(props.polling);
  }, [props.polling]);
  useImperativeHandle(ref, () => ({
    updateRow: (rowData, rowKey2) => {
      const key = rowKey2 || props.rowKey || "id";
      const newData = dataSource.map(
        (item) => item[key] === rowData[key] ? rowData : item
      );
      setDataSource(newData);
    }
  }));
  let {
    moduleTitle = "",
    moduleName = "",
    editNameKey = "",
    beforeRequestFormat = (arg) => arg,
    addRequest,
    delRequest,
    detailRequest,
    editRequest,
    listRequest,
    changeStatusRequest,
    exportRequest,
    actions = () => [],
    actionsWidth = 100,
    toolBarActions = () => [],
    searchConfig = {},
    scroll = {},
    formWidth,
    authConfig,
    pageSize = 20,
    changeStatusMap = { 1: "\u542F\u7528", 2: "\u7981\u7528" },
    footer,
    summary,
    onReset,
    rowKey = "id",
    onFormValuesChange
  } = props;
  if (!moduleName && _.isString(moduleTitle)) {
    moduleName = moduleTitle;
  }
  const showForm = (formData) => {
    formRef?.current?.showForm(FormType.EDIT, formData);
  };
  const rowAction = async (type, record) => {
    let formData = { ...record };
    switch (type) {
      case RowActionType.EDIT:
        if (detailRequest) {
          formData = await detailRequest(record);
        }
        showForm(formData);
        break;
      case RowActionType.DELETE:
        Modal.confirm({
          title: "\u64CD\u4F5C\u786E\u8BA4",
          content: `\u786E\u5B9A\u8981\u5220\u9664\u8BE5\u9879\u5417\uFF1F`,
          onOk: async () => {
            await delRequest?.(record);
            message.success(`\u5220\u9664\u6210\u529F`);
            tableRef?.current?.reload();
          },
          ...BaseModalConfig
        });
        break;
      case RowActionType.CHANGE_STATUS:
        Modal.confirm({
          title: "\u64CD\u4F5C\u786E\u8BA4",
          content: `\u786E\u5B9A\u8981${record.status === 1 ? changeStatusMap[2] : changeStatusMap[1]}\u8BE5${moduleName}\u5417\uFF1F`,
          onOk: async () => {
            await changeStatusRequest?.({
              id: record.id,
              status: record.status === 1 ? 2 : 1
            });
            message.success(`\u64CD\u4F5C\u6210\u529F`);
            tableRef?.current?.reload();
          },
          ...BaseModalConfig
        });
        break;
    }
  };
  const isEditRequest = editRequest !== void 0;
  const isDelRequest = delRequest !== void 0;
  const isChangeStatusRequest = changeStatusRequest !== void 0;
  const columns = [...props.columns];
  if (isEditRequest || isDelRequest || isChangeStatusRequest || actions().length > 0) {
    columns.push({
      title: "\u64CD\u4F5C",
      valueType: "option",
      className: "table-action",
      align: "center",
      fixed: "right",
      width: actionsWidth,
      render: (text, record) => [
        isEditRequest && /* @__PURE__ */ React.createElement(
          WithLink,
          {
            key: RowActionType.EDIT,
            auth: authConfig?.editAuth ?? true,
            onClick: () => rowAction(RowActionType.EDIT, record)
          },
          "\u7F16\u8F91"
        ),
        isDelRequest && /* @__PURE__ */ React.createElement(
          WithLink,
          {
            className: "text-red",
            key: RowActionType.DELETE,
            onClick: () => rowAction(RowActionType.DELETE, record),
            auth: authConfig?.delAuth ?? true
          },
          "\u5220\u9664"
        ),
        ...actions(record),
        isChangeStatusRequest && /* @__PURE__ */ React.createElement(
          WithLink,
          {
            className: record.status === 1 ? "text-red" : "text-green",
            auth: authConfig?.statusAuth ?? true,
            key: RowActionType.CHANGE_STATUS + "-auto",
            onClick: () => rowAction(RowActionType.CHANGE_STATUS, record)
          },
          changeStatusMap[record.status === 1 ? 2 : 1]
        )
      ]
    });
  }
  columns.forEach((item) => {
    let prefix = "\u8BF7\u8F93\u5165";
    if (item.valueType === "select" || item.valueType === "radio" || item.valueType === "checkbox" || item.valueType === "switch" || item.valueType === "date" || item.valueType === "dateRange" || item.valueType === "dateTime" || item.valueType === "dateTimeRange" || item.valueType === "time" || item.valueType === "timeRange" || item.valueType === "cascader") {
      prefix = "\u8BF7\u9009\u62E9";
    }
    const fieldProps = item.fieldProps || {};
    if (!fieldProps.placeholder) {
      fieldProps.placeholder = `${prefix}${item.title}`;
    }
    item.fieldProps = fieldProps;
    const formItemProps = item.formItemProps || {};
    if (!formItemProps.placeholder) {
      formItemProps.placeholder = `${prefix}${item.title}`;
    }
    item.formItemProps = formItemProps;
    if (!item.align) {
      item.align = "center";
    }
  });
  const isForm = addRequest || editRequest;
  let _addRequest = void 0;
  if (addRequest) {
    _addRequest = async (param) => {
      return addRequest ? addRequest(beforeRequestFormat(param)) : void 0;
    };
  }
  let _editRequest = void 0;
  if (editRequest) {
    _editRequest = async (param) => {
      return editRequest ? editRequest(beforeRequestFormat(param)) : void 0;
    };
  }
  const toolBarRender = (action) => [
    exportRequest && /* @__PURE__ */ React.createElement(
      Button,
      {
        key: "export",
        className: "ant-btn-export",
        loading: exportLoading,
        onClick: async () => {
          if (exportRequest) {
            try {
              setExportLoading(true);
              const searchParams = searchFormRef?.current?.getFieldsFormatValue();
              await exportRequest(searchParams);
              message.success("\u5BFC\u51FA\u6210\u529F");
            } catch (e) {
              message.error("\u5BFC\u51FA\u5931\u8D25");
            } finally {
              setExportLoading(false);
            }
          }
        }
      },
      "\u5BFC\u51FA"
    ),
    ...toolBarActions(action),
    isForm && /* @__PURE__ */ React.createElement(
      FormModal,
      {
        moduleName,
        editNameKey,
        addRequest: _addRequest,
        editRequest: _editRequest,
        key: "form",
        columns,
        tableRef,
        ref: formRef,
        formWidth,
        addAuth: authConfig?.addAuth,
        onFormValuesChange
      }
    ),
    (props?.polling || 0) > 0 && /* @__PURE__ */ React.createElement(
      Button,
      {
        key: "polling",
        type: "primary",
        onClick: () => {
          if (polling) {
            setPolling(void 0);
            return;
          }
          setPolling(props?.polling || 5e3);
        }
      },
      polling ? /* @__PURE__ */ React.createElement(LoadingOutlined, null) : /* @__PURE__ */ React.createElement(ReloadOutlined, null),
      polling ? "\u505C\u6B62\u81EA\u52A8\u5237\u65B0" : "\u81EA\u52A8\u5237\u65B0"
    )
  ];
  const search = {
    filterType: "query",
    span: { xs: 24, sm: 24, md: 12, lg: 8, xl: 8, xxl: 4 },
    searchGutter: 10,
    showHiddenNum: true,
    defaultCollapsed: false,
    collapsed: false,
    labelWidth: "auto",
    collapseRender: () => null,
    ...searchConfig || {}
  };
  let cardBordered = {
    search: true,
    table: true
  };
  if (props.cardBordered !== void 0) {
    cardBordered = props.cardBordered;
  }
  let className = "";
  if (props.hiddenToolBar) {
    className = "hidden-tool-bar";
  }
  if (polling) {
    moduleTitle = /* @__PURE__ */ React.createElement("span", { className: "polling-module-title" }, /* @__PURE__ */ React.createElement("span", null, moduleTitle), /* @__PURE__ */ React.createElement("span", { className: "last-update-time" }, "\u6700\u540E\u66F4\u65B0\u65F6\u95F4\uFF1A", listRequestTime));
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    ProTable,
    {
      dataSource,
      className,
      headerTitle: moduleTitle,
      actionRef: tableRef,
      columns,
      request: async (params, sort, filter) => {
        const response = await listRequest(params, sort, filter);
        setDataSource(response?.data || []);
        return response;
      },
      onLoad: () => {
        if (polling) {
          setListRequestTime(dayjs().format("YYYY-MM-DD HH:mm:ss"));
        }
      },
      rowKey,
      cardBordered,
      search,
      formRef: searchFormRef,
      scroll,
      footer,
      summary,
      pagination: {
        position: ["bottomCenter"],
        showQuickJumper: true,
        size: "default",
        defaultPageSize: pageSize,
        showSizeChanger: true
      },
      toolBarRender,
      polling: polling || void 0,
      onReset
    }
  ));
};
export default forwardRef(TablePage);
