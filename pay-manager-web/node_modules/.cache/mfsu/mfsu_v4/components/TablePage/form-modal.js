import React, {
  forwardRef,
  useImperativeHandle,
  useRef,
  useState
} from "react";
import { message } from "antd";
import { BaseModalConfig } from "@/constants";
import { WithButton } from "@/components/WithElement";
import { BetaSchemaForm } from "@ant-design/pro-components";
import { PlusOutlined } from "@ant-design/icons";
import { FormType } from "@/types";
export default forwardRef((props, ref) => {
  const {
    moduleName,
    columns,
    children,
    tableRef,
    addRequest,
    editRequest,
    formWidth,
    addAuth,
    editNameKey = ""
  } = props;
  const formRef = useRef();
  const formColumns = useRef(columns);
  const [visible, setVisible] = useState(false);
  const [type, setType] = useState(FormType.ADD);
  const [editFormData, setEditFormData] = useState({});
  const showForm = async (type2, formData) => {
    const _formData = { ...formData };
    setType(type2);
    setEditFormData(_formData);
    setVisible(true);
    formRef?.current?.setFieldsValue(_formData);
  };
  const onVisibleChange = (_visible) => {
    const _type = !_visible ? FormType.ADD : type;
    if (type === FormType.ADD) {
      formRef?.current?.resetFields();
    }
    setVisible(_visible);
    setType(_type);
  };
  const onFinish = async (values) => {
    let formData = { ...values };
    if (type === FormType.EDIT && editFormData !== void 0) {
      formData = {
        ...editFormData,
        ...values
      };
    }
    if (type === FormType.ADD) {
      await addRequest?.(formData);
      message.success("\u521B\u5EFA\u6210\u529F");
    } else if (type === FormType.EDIT) {
      await editRequest?.(formData);
      message.success("\u66F4\u65B0\u6210\u529F");
    }
    tableRef.current.reload();
    return true;
  };
  useImperativeHandle(ref, () => ({
    showForm
  }));
  const getTitle = () => {
    if (type === FormType.ADD) {
      return `\u6DFB\u52A0${moduleName}`;
    }
    return `\u7F16\u8F91${moduleName}${editNameKey ? `(${editFormData[editNameKey]})` : ""}`;
  };
  return /* @__PURE__ */ React.createElement(
    BetaSchemaForm,
    {
      layoutType: "ModalForm",
      columns: formColumns.current,
      visible,
      width: formWidth ?? 700,
      modalProps: {
        ...BaseModalConfig,
        destroyOnClose: false,
        onCancel: () => setVisible(false)
      },
      onVisibleChange,
      title: getTitle(),
      formRef,
      trigger: children ? children : addRequest ? /* @__PURE__ */ React.createElement(
        WithButton,
        {
          type: "primary",
          icon: /* @__PURE__ */ React.createElement(PlusOutlined, null),
          auth: addAuth ?? true
        },
        "\u6DFB\u52A0",
        moduleName
      ) : null,
      onFinish,
      onValuesChange: (values) => {
        setTimeout(() => {
          props.onFormValuesChange?.(values, formRef);
        }, 0);
      }
    }
  );
});
