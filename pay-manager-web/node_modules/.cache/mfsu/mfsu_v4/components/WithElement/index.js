import React, { Component } from "react";
import { Button } from "antd";
import { omit } from "lodash";
import PermissionUtils from "@/utils/class/PermissionUtils";
class Links extends React.Component {
  constructor() {
    super(...arguments);
    // underline有下划线 danger文字颜色和下划线颜色是红色 plainText鼠标光标是箭头,文字颜色是黑色
    this.classConfig = ["underline", "danger", "plainText", "disabled"];
  }
  render() {
    const classArray = ["table-tool__link"];
    this.classConfig.forEach((i) => {
      if (this.props.hasOwnProperty(i) && this.props[i]) {
        classArray.push(`table-tool__${i}`);
      }
    });
    return /* @__PURE__ */ React.createElement("a", { className: classArray.join(" "), ...omit(this.props, this.classConfig) }, this.props.children);
  }
}
export const WithElement = (ComposedComponent) => {
  class WithElements extends Component {
    constructor() {
      super(...arguments);
      // props中的关键字
      this.filterKey = ["auth", "dispatch"];
      // 过滤props中的关键字，防止与原生标签属性重名等问题
      this.filterProps = (props) => {
        const result = {};
        Object.keys(props).forEach((key) => {
          if (!this.filterKey.includes(key)) {
            result[key] = props[key];
          }
        });
        return result;
      };
      this.checkPerm = (auth) => {
        if (auth === "true") {
          return true;
        }
        return PermissionUtils.checkPageResource(auth) || PermissionUtils.checkPageAccess(auth);
      };
    }
    render() {
      const { auth = false } = this.props;
      const newProps = this.filterProps(this.props);
      if (this.checkPerm(auth.toString())) {
        return /* @__PURE__ */ React.createElement(ComposedComponent, { ...newProps });
      }
      return null;
    }
  }
  return WithElements;
};
export const WithButton = WithElement(Button);
export const WithLink = WithElement(Links);
