import { history, useModel } from "umi";
import utils from "@/utils";
import { useAsyncEffect } from "ahooks";
import { EnterModeEnum } from "@/enums";
import { APP_USER_INFO } from "@/constants/storage";
import common from "@/utils/common";
import services from "@/services";
import { APP_NAME } from "@/constants";
import logo from "@/assets/logo.png";
import HeaderRight from "@/components/HeaderRight";
export const getInitialState = async () => {
  return {};
};
export const layout = () => {
  const { enterMode, isLogin, userInfo, _getUserInfo, _logout } = useModel("user");
  useAsyncEffect(async () => {
    if (isLogin && enterMode === EnterModeEnum.Refresh) {
      await _getUserInfo();
    }
  }, [isLogin]);
  return {
    logo,
    title: APP_NAME,
    layout: "mix",
    menu: {
      locale: false
    },
    rightContentRender: () => HeaderRight()
  };
};
const excludesPath = ["/login", "/404", "/"];
const getRealPath = (path) => String(path).split("/").length === 2 ? path.replace("/", "") : path;
const validPath = (path) => {
  if (excludesPath.includes(path)) {
    return true;
  }
  const realPath = getRealPath(path);
  return common.permissionUtils.checkPageAccess(realPath);
};
const filterRoutes = (staticRoutes) => {
  return staticRoutes.filter((routeItem) => {
    let { children, routes, path } = routeItem;
    if (children && children.length) {
      routeItem.children = filterRoutes(children);
    }
    if (routes && routes.length) {
      routeItem.routes = filterRoutes(routes);
    }
    return validPath(path);
  });
};
export function patchClientRoutes({ routes }) {
  if (common.permissionUtils.hasAsyncRouter()) {
    filterRoutes(routes);
  }
}
export const render = async (routerRender) => {
  const loginPath = "/login";
  const userinfo = utils.localStorage.get(APP_USER_INFO) ?? {};
  const isLogin = userinfo.userName && userinfo.token;
  if (isLogin) {
    try {
      await services.user.getUserRouter();
      if (location.pathname === loginPath) {
        history.push("/");
      } else {
        const realPath = getRealPath(location.pathname);
        if (!common.permissionUtils.checkPageAccess(realPath)) {
          history.push("/404");
        }
      }
      routerRender();
    } catch (e) {
      history.push(loginPath);
      routerRender();
    }
  } else {
    history.push(loginPath);
    routerRender();
  }
};
