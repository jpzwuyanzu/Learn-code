{"ast":null,"code":"import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport TabBarReducer from './tabbar.slice';\nimport { SHOW_TAB_KEY } from './tabbar.slice';\nimport SelectCityReducer from './selectcity.slice';\nimport { SELECT_CITY_KEY } from './selectcity.slice';\n\n//配置redux数据持久化\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nconst reducers = combineReducers({\n  [SHOW_TAB_KEY]: TabBarReducer,\n  [SELECT_CITY_KEY]: SelectCityReducer\n});\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blcklist: ['NotFound']\n};\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\n//配置store\nconst store = configureStore({\n  reducer: persistedReducer,\n  // 配置中间件\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware({\n    serializableCheck: false\n  })]\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\nexport const persistor = persistStore(store);\nexport default store;","map":{"version":3,"names":["configureStore","combineReducers","TabBarReducer","SHOW_TAB_KEY","SelectCityReducer","SELECT_CITY_KEY","persistStore","persistReducer","storage","reducers","persistConfig","key","blcklist","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor"],"sources":["/Users/xinyonghu/Desktop/personalCode/react18-learn/xiaotaimei/src/store/index.ts"],"sourcesContent":["import { configureStore, combineReducers } from '@reduxjs/toolkit'\nimport TabBarReducer from './tabbar.slice';\nimport {SHOW_TAB_KEY} from './tabbar.slice'\nimport SelectCityReducer from './selectcity.slice';\nimport {SELECT_CITY_KEY} from './selectcity.slice'\n\n//配置redux数据持久化\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nconst reducers = combineReducers({\n    [SHOW_TAB_KEY] : TabBarReducer,\n    [SELECT_CITY_KEY] : SelectCityReducer\n})\nconst persistConfig = {\n    key: 'root',\n    storage,\n    blcklist: ['NotFound']\n}\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\n//配置store\nconst store = configureStore({\n    reducer: persistedReducer,\n    // 配置中间件\n    middleware: (getDefaultMiddleware) => [\n        ...getDefaultMiddleware({ serializableCheck: false })\n    ]\n})\n\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport const persistor = persistStore(store)\nexport default store;\n\n\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,eAAe,QAAQ,kBAAkB;AAClE,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,SAAQC,YAAY,QAAO,gBAAgB;AAC3C,OAAOC,iBAAiB,MAAM,oBAAoB;AAClD,SAAQC,eAAe,QAAO,oBAAoB;;AAElD;AACA,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAE/C,MAAMC,QAAQ,GAAGR,eAAe,CAAC;EAC7B,CAACE,YAAY,GAAID,aAAa;EAC9B,CAACG,eAAe,GAAID;AACxB,CAAC,CAAC;AACF,MAAMM,aAAa,GAAG;EAClBC,GAAG,EAAE,MAAM;EACXH,OAAO;EACPI,QAAQ,EAAE,CAAC,UAAU;AACzB,CAAC;AACD,MAAMC,gBAAgB,GAAGN,cAAc,CAACG,aAAa,EAAED,QAAQ,CAAC;;AAEhE;AACA,MAAMK,KAAK,GAAGd,cAAc,CAAC;EACzBe,OAAO,EAAEF,gBAAgB;EACzB;EACAG,UAAU,EAAGC,oBAAoB,IAAK,CAClC,GAAGA,oBAAoB,CAAC;IAAEC,iBAAiB,EAAE;EAAM,CAAC,CAAC;AAE7D,CAAC,CAAC;;AAGF;;AAKA,OAAO,MAAMC,SAAS,GAAGb,YAAY,CAACQ,KAAK,CAAC;AAC5C,eAAeA,KAAK"},"metadata":{},"sourceType":"module"}